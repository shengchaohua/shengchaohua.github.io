import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as l,d as i,a as n,e as s,b as p,f as t}from"./app-qKT_MvSj.js";const u={},k=t(`<h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h2><h3 id="冒泡排序" tabindex="-1"><a class="header-anchor" href="#冒泡排序"><span>冒泡排序</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> A<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="插入排序" tabindex="-1"><a class="header-anchor" href="#插入排序"><span>插入排序</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">insert_sort</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        temp <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temp<span class="token punctuation">:</span>
            A<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            j <span class="token operator">-=</span> <span class="token number">1</span>
        A<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp  <span class="token comment"># 不满条件的下一个位置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="选择排序" tabindex="-1"><a class="header-anchor" href="#选择排序"><span>选择排序</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">select_sort</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        k <span class="token operator">=</span> i
        <span class="token comment"># Find the smallest num and record its index</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> A<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>
                k <span class="token operator">=</span> j
        <span class="token keyword">if</span> k <span class="token operator">!=</span> i<span class="token punctuation">:</span>
            A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="归并排序" tabindex="-1"><a class="header-anchor" href="#归并排序"><span>归并排序</span></a></h3><p>1）返回数组法。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># return sorted(A + B)</span>
    temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token keyword">and</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            i <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
            j <span class="token operator">+=</span> <span class="token number">1</span>
    temp<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    temp<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>B<span class="token punctuation">[</span>j<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> temp


<span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> A
    mid <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
    left <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>
    right <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>A<span class="token punctuation">[</span>mid<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>
    
<span class="token comment"># res = merge_sort(A)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）原地操作法。函数参数稍微复杂。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;A[left:mid+1], A[mid+1:right+1]&quot;&quot;&quot;</span>
    temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 用于存储数字</span>
    i<span class="token punctuation">,</span> j <span class="token operator">=</span> left<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> mid <span class="token keyword">and</span> j <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>
        <span class="token keyword">if</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            i <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
            j <span class="token operator">+=</span> <span class="token number">1</span>
    temp<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">:</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    temp<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">:</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    A<span class="token punctuation">[</span>left<span class="token punctuation">:</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp


<span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        merge_sort<span class="token punctuation">(</span>A<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>
        merge_sort<span class="token punctuation">(</span>A<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>
        merge<span class="token punctuation">(</span>A<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span>
        
<span class="token comment"># merge_sort(A, 0, len(A) - 1)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="快速排序" tabindex="-1"><a class="header-anchor" href="#快速排序"><span>快速排序</span></a></h3><p>介绍三种写法的快速排序。三种写法的quick_sort函数相同，在此给出。</p><p>推荐使用<strong>填坑法</strong>，比较直观，便于记忆。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
        p <span class="token operator">=</span> partition<span class="token punctuation">(</span>A<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>
        quick_sort<span class="token punctuation">(</span>A<span class="token punctuation">,</span> left<span class="token punctuation">,</span> p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        quick_sort<span class="token punctuation">(</span>A<span class="token punctuation">,</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>
        
<span class="token comment"># quick_sort(A, 0, len(A) - 1)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1）填坑法。</p><p>使用第一个元素当作轴元素。注意先从右往左比较，大于等于号；再从左往右比较，小于号。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
    pivot <span class="token operator">=</span> A<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> A<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> pivot<span class="token punctuation">:</span>
            right <span class="token operator">-=</span> <span class="token number">1</span>
        A<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>right<span class="token punctuation">]</span>  <span class="token comment"># 看作填坑</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> A<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">:</span>
            left <span class="token operator">+=</span> <span class="token number">1</span>
        A<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>left<span class="token punctuation">]</span>  <span class="token comment"># 看作填坑</span>
    A<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> pivot
    <span class="token keyword">return</span> left
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）交换法。</p><p>使用第一个元素当作轴元素。注意先从右往左比较，大于等于号；再从左往右比较，小于等于号。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
    pivot_idx <span class="token operator">=</span> left
    pivot <span class="token operator">=</span> A<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> A<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> pivot<span class="token punctuation">:</span>
            right <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> A<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">:</span>
            left <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>  <span class="token comment"># 进行交换</span>
            A<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
    A<span class="token punctuation">[</span>pivot_idx<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>pivot_idx<span class="token punctuation">]</span>
    <span class="token keyword">return</span> left
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）顺序遍历法。</p><p>算法导论中的写法，选择最后一个元素作为轴元素。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
    pivot <span class="token operator">=</span> A<span class="token punctuation">[</span>right<span class="token punctuation">]</span>  <span class="token comment"># 选择最后一个元素作为轴元素</span>
    store_idx <span class="token operator">=</span> left <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">for</span> cur <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 顺序遍历</span>
        <span class="token keyword">if</span> A<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">:</span>
            store_idx <span class="token operator">+=</span> <span class="token number">1</span>
            A<span class="token punctuation">[</span>store_idx<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>store_idx<span class="token punctuation">]</span>
    A<span class="token punctuation">[</span>store_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>store_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> store_idx <span class="token operator">+</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选择第一个元素作为轴元素，而且该写法可以推广到链表排序。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
    pivot <span class="token operator">=</span> A<span class="token punctuation">[</span>left<span class="token punctuation">]</span>  <span class="token comment"># 选择第一个元素作为轴元素</span>
    store_idx <span class="token operator">=</span> left
    <span class="token keyword">for</span> cur <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 顺序遍历</span>
        <span class="token keyword">if</span> A<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">:</span>
            store_idx <span class="token operator">+=</span> <span class="token number">1</span>
            A<span class="token punctuation">[</span>store_idx<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>store_idx<span class="token punctuation">]</span>
    A<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>store_idx<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>store_idx<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
    <span class="token keyword">return</span> store_idx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="堆排序" tabindex="-1"><a class="header-anchor" href="#堆排序"><span>堆排序</span></a></h3>`,29),r={href:"https://blog.csdn.net/shengchaohua163/article/details/83038413",title:"Python实现 《算法导论 第三版》中的算法 第6章 堆排序",target:"_blank",rel:"noopener noreferrer"},d=t(`<p>下面的代码实现了一个最大堆以及堆排序算法：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_parent</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>


<span class="token keyword">def</span> <span class="token function">get_left</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span>


<span class="token keyword">def</span> <span class="token function">get_right</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span>


<span class="token keyword">def</span> <span class="token function">max_heapify_recursive</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> heap_size<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
    l <span class="token operator">=</span> get_left<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    r <span class="token operator">=</span> get_right<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    largest_ind <span class="token operator">=</span> i
    <span class="token keyword">if</span> l <span class="token operator">&lt;</span> heap_size <span class="token keyword">and</span> A<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&gt;</span> A<span class="token punctuation">[</span>largest_ind<span class="token punctuation">]</span><span class="token punctuation">:</span>
        largest_ind <span class="token operator">=</span> l
    <span class="token keyword">if</span> r <span class="token operator">&lt;</span> heap_size <span class="token keyword">and</span> A<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&gt;</span> A<span class="token punctuation">[</span>largest_ind<span class="token punctuation">]</span><span class="token punctuation">:</span>
        largest_ind <span class="token operator">=</span> r
    <span class="token keyword">if</span> largest_ind <span class="token operator">==</span> i<span class="token punctuation">:</span>
        <span class="token keyword">return</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>largest_ind<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>largest_ind<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        max_heapify_recursive<span class="token punctuation">(</span>A<span class="token punctuation">,</span> heap_size<span class="token punctuation">,</span> largest_ind<span class="token punctuation">)</span>
    
    
<span class="token keyword">def</span> <span class="token function">max_heapify_loop</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> heap_size<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span> 
    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> heap_size<span class="token punctuation">:</span>
        l <span class="token operator">=</span> get_left<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        r <span class="token operator">=</span> get_right<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        largest_ind <span class="token operator">=</span> i
        <span class="token keyword">if</span> l <span class="token operator">&lt;</span> heap_size <span class="token keyword">and</span> A<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&gt;</span> A<span class="token punctuation">[</span>largest_ind<span class="token punctuation">]</span><span class="token punctuation">:</span>
            largest_ind <span class="token operator">=</span> l
        <span class="token keyword">if</span> r <span class="token operator">&lt;</span> heap_size <span class="token keyword">and</span> A<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&gt;</span> A<span class="token punctuation">[</span>largest_ind<span class="token punctuation">]</span><span class="token punctuation">:</span>
            largest_ind <span class="token operator">=</span> r
        <span class="token keyword">if</span> largest_ind <span class="token operator">==</span> i<span class="token punctuation">:</span>
            <span class="token keyword">break</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>largest_ind<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>largest_ind<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            i <span class="token operator">=</span> largest_ind


<span class="token keyword">def</span> <span class="token function">build_max_heap</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> heap_size<span class="token punctuation">)</span><span class="token punctuation">:</span>
    begin <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span>  <span class="token comment"># len(A)//2 - 1是堆中第一个叶子节点的前一个节点</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        max_heapify_loop<span class="token punctuation">(</span>A<span class="token punctuation">,</span> heap_size<span class="token punctuation">,</span> i<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>
    heap_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>
    build_max_heap<span class="token punctuation">(</span>A<span class="token punctuation">,</span> heap_size<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 每次固定最后一个元素，并将堆大小减一</span>
        heap_size <span class="token operator">-=</span> <span class="token number">1</span>
        max_heapify_loop<span class="token punctuation">(</span>A<span class="token punctuation">,</span> heap_size<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="线性时间排序" tabindex="-1"><a class="header-anchor" href="#线性时间排序"><span>线性时间排序</span></a></h3>`,3),m={href:"https://blog.csdn.net/shengchaohua163/article/details/83444059",title:"Python实现 《算法导论 第三版》中的算法 第8章 线性时间排序",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,[s("上面的几种算法都是基于比较的算法，时间复杂度最好可以达到"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mi",null,"lg"),n("mo",null,"⁡"),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n\\lg n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mop"},[s("l"),n("span",{style:{"margin-right":"0.01389em"}},"g")]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s("，比如归并排序、堆排序和快速排序。归并排序和堆排序在最坏情况下能够达到该复杂度，快速排序在平均情况达到该复杂度。注意，快速排序最坏情况下是"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("msup",null,[n("mi",null,"n"),n("mn",null,"2")]),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])]),n("span",{class:"mclose"},")")])])]),s("。")],-1),b=n("p",null,"下面介绍一下三种线性时间复杂度的排序算法：计数排序、基数排序和桶排序。",-1),h=n("h2",{id:"leetcode-编程题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#leetcode-编程题"},[n("span",null,"Leetcode 编程题")])],-1),g=n("h3",{id:"lcr-164-把数组排成最小的数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#lcr-164-把数组排成最小的数"},[n("span",null,"LCR 164. 把数组排成最小的数")])],-1),y={href:"https://leetcode.cn/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>一、题目</p><p>输入一个非负整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。</p><p>二、解析</p><p>字典顺序。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">minNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        str_nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">]</span>  
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> str_nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> str_nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> str_nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> str_nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
                    str_nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> str_nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> str_nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> str_nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        
        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>str_nums<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_56-合并区间" tabindex="-1"><a class="header-anchor" href="#_56-合并区间"><span>56. 合并区间</span></a></h3>`,7),_={href:"https://leetcode.cn/problems/merge-intervals/",target:"_blank",rel:"noopener noreferrer"},w=t(`<p>一、题目</p><p>给出一个区间的集合，请合并所有重叠的区间。</p><p>二、解析</p><p>排序即可。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> intervals<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        intervals<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> ele<span class="token punctuation">:</span> ele<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> inter <span class="token keyword">in</span> intervals<span class="token punctuation">:</span>
            <span class="token keyword">if</span> res <span class="token keyword">and</span> res<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> inter<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                last <span class="token operator">=</span> res<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>last<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span>last<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inter<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>inter<span class="token punctuation">)</span>
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_406-根据身高重建队列" tabindex="-1"><a class="header-anchor" href="#_406-根据身高重建队列"><span>406. 根据身高重建队列</span></a></h3>`,7),A={href:"https://leetcode.cn/problems/queue-reconstruction-by-height/",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,"一、题目",-1),j=n("p",null,"假设有打乱顺序的一群人站成一个队列。 每个人由一个整数对(h, k)表示，其中h是这个人的身高，k是排在这个人前面且身高大于或等于h的人数。 编写一个算法来重建这个队列。 注意：总人数少于1100人。",-1),q=n("p",null,"二、解析",-1),L=n("p",null,"按身高降序、人数升序排序。",-1),z={href:"https://leetcode-cn.com/problems/queue-reconstruction-by-height/solution/gen-ju-shen-gao-zhong-jian-dui-lie-by-leetcode/",title:"Leetcode 官方题解",target:"_blank",rel:"noopener noreferrer"},B=t(`<p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reconstructQueue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> people<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        people<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> p <span class="token keyword">in</span> people<span class="token punctuation">:</span>
            res<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lcr-170-交易逆序对的总数" tabindex="-1"><a class="header-anchor" href="#lcr-170-交易逆序对的总数"><span>LCR 170. 交易逆序对的总数</span></a></h3>`,3),O={href:"https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/",target:"_blank",rel:"noopener noreferrer"},S=t(`<p>一、题目</p><p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。</p><p>二、解析</p><p>使用归并排序。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reversePairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">:</span>
            temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
            i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token keyword">and</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
                    temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    i <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    j <span class="token operator">+=</span> <span class="token number">1</span>
                    self<span class="token punctuation">.</span>res <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">-</span> i
            temp<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            temp<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>B<span class="token punctuation">[</span>j<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> temp

        <span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> A
            mid <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
            left <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>
            right <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>A<span class="token punctuation">[</span>mid<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>res <span class="token operator">=</span> <span class="token number">0</span>
        merge_sort<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_493-翻转对" tabindex="-1"><a class="header-anchor" href="#_493-翻转对"><span>493. 翻转对</span></a></h3>`,7),C={href:"https://leetcode-cn.com/problems/reverse-pairs/",target:"_blank",rel:"noopener noreferrer"},M=t(`<p>一、题目</p><p>给定一个数组nums，如果i &lt; j且nums[i] &gt; 2 * nums[j]我们就将(i, j)称作一个重要翻转对。你需要返回给定数组中的重要翻转对的数量。</p><p>二、解析</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reversePairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token triple-quoted-string string">&quot;&quot;&quot;A[left:mid+1], A[mid+1:right+1]&quot;&quot;&quot;</span>
            temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 用于存储数字</span>
            i<span class="token punctuation">,</span> j <span class="token operator">=</span> left<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> mid <span class="token keyword">and</span> j <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>
                <span class="token keyword">if</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
                    temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    i <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    j <span class="token operator">+=</span> <span class="token number">1</span>
            temp<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">:</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            temp<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">:</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            A<span class="token punctuation">[</span>left<span class="token punctuation">:</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp


        <span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> left <span class="token operator">&gt;=</span> right<span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token number">0</span>
            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
            count <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>A<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">+</span> merge_sort<span class="token punctuation">(</span>A<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>
            j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">while</span> j <span class="token operator">&lt;=</span> right <span class="token keyword">and</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">:</span>
                    j <span class="token operator">+=</span> <span class="token number">1</span>
                count <span class="token operator">+=</span> j <span class="token operator">-</span> mid <span class="token operator">-</span> <span class="token number">1</span>
            merge<span class="token punctuation">(</span>A<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span>
            <span class="token keyword">return</span> count
        
        <span class="token keyword">return</span> merge_sort<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_315-计算右侧小于当前元素的个数" tabindex="-1"><a class="header-anchor" href="#_315-计算右侧小于当前元素的个数"><span>315. 计算右侧小于当前元素的个数</span></a></h3>`,6),N={href:"https://leetcode.cn/problems/count-of-smaller-numbers-after-self/",target:"_blank",rel:"noopener noreferrer"},P=t(`<p>一、题目</p><p>给定一个整数数组 nums，按要求返回一个新数组counts。数组counts有该性质：counts[i] 的值是nums[i]右侧小于nums[i]的元素的数量。</p><p>二、解析</p><p>二分查找、归并排序、树状数组等。</p><p>1）二分查找</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">countSmaller</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">import</span> bisect
        queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            loc <span class="token operator">=</span> bisect<span class="token punctuation">.</span>bisect_left<span class="token punctuation">(</span>queue<span class="token punctuation">,</span> num<span class="token punctuation">)</span>
            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loc<span class="token punctuation">)</span>
            queue<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>loc<span class="token punctuation">,</span> num<span class="token punctuation">)</span>
        <span class="token keyword">return</span> res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）归并排序</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">countSmaller</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
            temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
            i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token keyword">or</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token keyword">or</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token keyword">and</span> left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                    temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    res<span class="token punctuation">[</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> j
                    i <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    j <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">return</span> temp
        
        <span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> nums
            mid <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
            left <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>
            right <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>
        
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span> num<span class="token punctuation">]</span> <span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">]</span>
        merge_sort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）树状数组</p><p>TODO</p><h3 id="_327-区间和的个数" tabindex="-1"><a class="header-anchor" href="#_327-区间和的个数"><span>327. 区间和的个数</span></a></h3>`,11),V={href:"https://leetcode.cn/problems/count-of-range-sum/",target:"_blank",rel:"noopener noreferrer"},R=n("p",null,"一、题目",-1),E=n("p",null,"给定一个整数数组nums，返回区间和在[lower,upper]之间的个数，包含lower和upper。区间和S(i, j)表示在nums中，位置从i到j的元素之和，包含i和j(i≤j)。说明: 最直观的算法复杂度是O(n^2)，请在此基础上优化你的算法。",-1),T=n("p",null,"二、解析",-1),D=n("p",null,"TODO",-1);function I(F,Q){const a=o("ExternalLinkIcon");return c(),l("div",null,[i(" more "),k,n("blockquote",null,[n("p",null,[n("a",r,[s("Python实现 《算法导论 第三版》中的算法 第6章 堆排序"),p(a)])])]),d,n("blockquote",null,[n("p",null,[n("a",m,[s("Python实现 《算法导论 第三版》中的算法 第8章 线性时间排序"),p(a)])])]),v,b,h,g,n("blockquote",null,[n("p",null,[n("a",y,[s("LCR 164. 破解闯关密码"),p(a)])])]),f,n("blockquote",null,[n("p",null,[n("a",_,[s("56. 合并区间"),p(a)])])]),w,n("blockquote",null,[n("p",null,[n("a",A,[s("406. 根据身高重建队列"),p(a)])])]),x,j,q,L,n("blockquote",null,[n("p",null,[s("参考 "),n("a",z,[s("Leetcode 官方题解"),p(a)])])]),B,n("blockquote",null,[n("p",null,[n("a",O,[s("LCR 170. 交易逆序对的总数"),p(a)])])]),S,n("blockquote",null,[n("p",null,[n("a",C,[s("493. 翻转对"),p(a)])])]),M,n("blockquote",null,[n("p",null,[n("a",N,[s("315. 计算右侧小于当前元素的个数"),p(a)])])]),P,n("blockquote",null,[n("p",null,[n("a",V,[s("327. 区间和的个数"),p(a)])])]),R,E,T,D])}const J=e(u,[["render",I],["__file","sort.html.vue"]]);export{J as default};
