import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as l,d as i,a as n,e as s,b as p,f as t}from"./app-qKT_MvSj.js";const u={},r=t(`<h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h2><p>字符串是指一个或多个字符的序列。</p><h3 id="字符和数字转换" tabindex="-1"><a class="header-anchor" href="#字符和数字转换"><span>字符和数字转换</span></a></h3><p>Python：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span>
aInt <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span> <span class="token comment"># ord returns the ascii code of a char</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> aInt<span class="token punctuation">)</span> <span class="token comment"># 49 48 1</span>

b <span class="token operator">=</span> <span class="token number">1</span>
bStr <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment"># bStr = &quot;1&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> bStr<span class="token punctuation">)</span> <span class="token comment"># 1 &quot;1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Golang：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>a <span class="token operator">:=</span> <span class="token char">&#39;1&#39;</span>
aInt <span class="token operator">:=</span> <span class="token function">rune</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">rune</span><span class="token punctuation">(</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token comment">// rune returns the unicode of a char</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">rune</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rune</span><span class="token punctuation">(</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> aInt<span class="token punctuation">)</span> <span class="token comment">// 49 48 1</span>

b <span class="token operator">:=</span> <span class="token number">1</span>
bStr <span class="token operator">:=</span> <span class="token function">rune</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">rune</span><span class="token punctuation">(</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> bStr<span class="token punctuation">)</span> <span class="token comment">// 1 49</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="leetcode-编程题" tabindex="-1"><a class="header-anchor" href="#leetcode-编程题"><span>Leetcode 编程题</span></a></h2><h3 id="_28-实现-strstr-字符串搜索" tabindex="-1"><a class="header-anchor" href="#_28-实现-strstr-字符串搜索"><span>28. 实现 strStr() - 字符串搜索</span></a></h3>`,9),k={href:"https://leetcode-cn.com/problems/implement-strstr/",title:"28. 实现 strStr()",target:"_blank",rel:"noopener noreferrer"},d=t(`<p>一、题目</p><p>实现 strStr() 函数。</p><p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回 -1。</p><p>二、解析</p><p>1）暴力搜索</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">strStr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> haystack<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> needle<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> needle<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> haystack<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
        
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>haystack<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> haystack<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">!=</span> needle<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
                    <span class="token keyword">break</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> i
        
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）KMP</p>`,7),v={href:"https://blog.csdn.net/weixin_39561100/article/details/80822208",title:"小白之KMP算法详解及python实现",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>对于一个长度为<code>N</code>的字符串<code>S</code>：</p><ul><li>前缀为第<code>0</code>个字符<code>S[0]</code>到第<code>j</code>个字符<code>S[j]</code>组成的子串，其中<code>0&lt;=j&lt;=N-1</code>。</li><li>后缀为第<code>j</code>个字符<code>S[j]</code>到第<code>N-1</code>个字符<code>S[N-1]</code>组成的子串，其中<code>0&lt;=j&lt;=N-1</code>。</li><li>真前（后）缀表示不包括字符串本身的前（后）缀。</li></ul><p>对于字符串<code>abcab</code>：</p><ul><li>前缀包括<code>a,ab,abc,abca,abcab</code>，后缀包括<code>abcab,bcab,cab,ab,b</code>。</li><li>真前缀包括<code>a,ab,abc,abca</code>，真后缀包括<code>bcab,cab,ab,b</code>。</li></ul><p>对于一个长度为<code>N</code>的字符串<code>S</code>，它的 next 指针数组的长度与字符串长度相等，其中第<code>i</code>个元素表示【该字符串第<code>0</code>个字符<code>S[0]</code>到第<code>i</code>个字符<code>S[i]</code>组成的子串】的相同真前后缀的最大长度。</p><p>对于字符串<code>abcab</code>，next 指针数组为<code>[0,0,0,1,2]</code>。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">strStr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> haystack<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> needle<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">gen_next</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>
            N <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
            next_pointer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> N
            left <span class="token operator">=</span> <span class="token number">0</span>
            cur <span class="token operator">=</span> <span class="token number">1</span>
            <span class="token keyword">while</span> cur <span class="token operator">&lt;</span> N<span class="token punctuation">:</span>
                <span class="token keyword">if</span> string<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">==</span> string<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">:</span>
                    next_pointer<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span>
                    left <span class="token operator">+=</span> <span class="token number">1</span>
                    cur <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">elif</span> left <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    next_pointer<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
                    cur <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment">## left != 0</span>
                    left <span class="token operator">=</span> next_pointer<span class="token punctuation">[</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
            <span class="token keyword">return</span> next_pointer

        nextp <span class="token operator">=</span> gen_next<span class="token punctuation">(</span>needle<span class="token punctuation">)</span>
        m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>haystack<span class="token punctuation">)</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span>
        i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> m <span class="token keyword">and</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>
            <span class="token keyword">if</span> haystack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> needle<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
                i <span class="token operator">+=</span> <span class="token number">1</span>
                j <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">elif</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                i <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                j <span class="token operator">=</span> nextp<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> j <span class="token operator">==</span> n<span class="token punctuation">:</span>
            <span class="token keyword">return</span> i <span class="token operator">-</span> j
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-字符串转换整数-atoi" tabindex="-1"><a class="header-anchor" href="#_8-字符串转换整数-atoi"><span>8. 字符串转换整数 (atoi)</span></a></h3>`,8),m={href:"https://leetcode-cn.com/problems/string-to-integer-atoi/",title:"8. 字符串转换整数 (atoi)",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>一、题目</p><p>请你来实现一个 atoi 函数，使其能将字符串转换成整数。</p><p>二、解析</p><p>不要使用<code>strip</code>函数。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">myAtoi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> string<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> string <span class="token keyword">or</span> string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        
        begin <span class="token operator">=</span> <span class="token number">0</span>
        res <span class="token operator">=</span> <span class="token number">0</span>
        sign <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">while</span> begin <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token keyword">and</span> string<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">:</span>
            begin <span class="token operator">+=</span> <span class="token number">1</span>
        
        <span class="token keyword">if</span> begin <span class="token operator">&gt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        
        <span class="token keyword">if</span> string<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;+&quot;</span><span class="token punctuation">:</span>
            begin <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">elif</span> string<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">:</span>
            sign <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
            begin <span class="token operator">+=</span> <span class="token number">1</span>
        
        <span class="token keyword">while</span> begin <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token keyword">and</span> string<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">)</span>
            begin <span class="token operator">+=</span> <span class="token number">1</span>
        
        res <span class="token operator">=</span> res <span class="token operator">*</span> sign
        <span class="token keyword">if</span> res <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">elif</span> res <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span>
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-无重复字符的最长子串" tabindex="-1"><a class="header-anchor" href="#_3-无重复字符的最长子串"><span>3. 无重复字符的最长子串</span></a></h3>`,7),h={href:"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/",title:"3. 无重复字符的最长子串",target:"_blank",rel:"noopener noreferrer"},y=t(`<p>一、题目</p><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><p><strong>示例 1:</strong></p><div class="language-纯文本 line-numbers-mode" data-ext="纯文本" data-title="纯文本"><pre class="language-纯文本"><code>输入: s = &quot;abcabcbb&quot;
输出: 3
解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入: s = &quot;bbbbb&quot;
输出: 1
解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 3:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入: s = &quot;pwwkew&quot;
输出: 3
解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 5 * 104</code></li><li><code>s</code>由英文字母、数字、符号和空格组成</li></ul><p>二、解析</p>`,11),w={href:"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/hua-dong-chuang-kou-by-powcai/",title:"Leetcode-powcai",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>滑动窗口。使用左右两个指针，右指针每次往右走，如果满足条件（或不满足条件），左指针就一直收敛。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">:</span> 
            <span class="token keyword">return</span> <span class="token number">0</span>
        
        res <span class="token operator">=</span> <span class="token number">0</span>
        left <span class="token operator">=</span> <span class="token number">0</span>
        seen <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> right <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">while</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token keyword">in</span> seen<span class="token punctuation">:</span>
                seen<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>
                left <span class="token operator">+=</span> <span class="token number">1</span>
            seen<span class="token punctuation">.</span>add<span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
            res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1044-最长重复子串" tabindex="-1"><a class="header-anchor" href="#_1044-最长重复子串"><span>1044. 最长重复子串</span></a></h3>`,4),q={href:"https://leetcode.cn/problems/longest-duplicate-substring/",target:"_blank",rel:"noopener noreferrer"},_=t(`<p>一、题目</p><p>给你一个字符串 s ，考虑其所有 重复子串 ：即 s 的（连续）子串，在 s 中出现 2 次或更多次。这些出现之间可能存在重叠。</p><p>返回 任意一个 可能具有最长长度的重复子串。如果 s 不含重复子串，那么答案为 &quot;&quot; 。</p><p>示例 1：</p><div class="language-纯文本 line-numbers-mode" data-ext="纯文本" data-title="纯文本"><pre class="language-纯文本"><code>输入：s = &quot;banana&quot;
输出：&quot;ana&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：s = &quot;abcd&quot;
输出：&quot;&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>提示：</p><ul><li>2 &lt;= s.length &lt;= 3 * 104</li><li>s 由小写英文字母组成</li></ul><p>二、解析</p><p>1）暴力法。</p>`,11),x={href:"https://leetcode.cn/problems/longest-duplicate-substring/solutions/1172467/python-jin-tian-zhe-ti-tai-nan-liao-wo-z-6wbs/",target:"_blank",rel:"noopener noreferrer"},j=t(`<p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">longestDupSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        ans <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span> <span class="token comment">## at least length</span>
            <span class="token keyword">while</span> s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">in</span> s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                ans <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
                length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
        <span class="token keyword">return</span> ans
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）二分法 + Rabin-Karp 字符串编码</p>`,3),S={href:"https://leetcode.cn/problems/longest-duplicate-substring/solution/zui-chang-zhong-fu-zi-chuan-by-leetcode-0i9rd/",target:"_blank",rel:"noopener noreferrer"},L=t(`<p>二分法用来从判断合适的长度。举个例子，如果存在长度为 5 的子串为最长重复子串，那么我们就考虑长度大于 5 的子串是否有可能，而不需要考虑长度小于 5 的子串了。</p><p>Rabin-Karp 字符串编码用来对子串进行编码，用来判断是否有长度为 L 的重复子串。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">longestDupSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token comment">## 生成两个进制</span>
        a1<span class="token punctuation">,</span> a2 <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
        <span class="token comment">## 生成两个模</span>
        mod1<span class="token punctuation">,</span> mod2 <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
        <span class="token comment">## 先对所有字符进行编码</span>
        arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">-</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">]</span>
        <span class="token comment">## 二分查找的范围是[1, n-1]</span>
        l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n
        length<span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>
        <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>
            m <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
            idx <span class="token operator">=</span> self<span class="token punctuation">.</span>check<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> mod1<span class="token punctuation">,</span> mod2<span class="token punctuation">)</span>
            <span class="token comment">## 有重复子串，移动左边界</span>
            <span class="token keyword">if</span> idx <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
                l <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span>
                length <span class="token operator">=</span> m
                start <span class="token operator">=</span> idx
            <span class="token comment">## 无重复子串，移动右边界</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                r <span class="token operator">=</span> m
        <span class="token keyword">return</span> s<span class="token punctuation">[</span>start<span class="token punctuation">:</span>start<span class="token operator">+</span>length<span class="token punctuation">]</span> <span class="token keyword">if</span> start <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">else</span> <span class="token string">&quot;&quot;</span>

    <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> mod1<span class="token punctuation">,</span> mod2<span class="token punctuation">)</span><span class="token punctuation">:</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
        aL1<span class="token punctuation">,</span> aL2 <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token operator">%</span> mod1<span class="token punctuation">,</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>a2<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token operator">%</span> mod2
        h1<span class="token punctuation">,</span> h2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
            h1 <span class="token operator">=</span> <span class="token punctuation">(</span>h1 <span class="token operator">*</span> a1 <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod1
            h2 <span class="token operator">=</span> <span class="token punctuation">(</span>h2 <span class="token operator">*</span> a2 <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod2
        <span class="token comment">## 存储一个编码组合是否出现过</span>
        seen <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">(</span>h1<span class="token punctuation">,</span> h2<span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token keyword">for</span> start <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            h1 <span class="token operator">=</span> <span class="token punctuation">(</span>h1 <span class="token operator">*</span> a1 <span class="token operator">-</span> arr<span class="token punctuation">[</span>start <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> aL1 <span class="token operator">+</span> arr<span class="token punctuation">[</span>start <span class="token operator">+</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod1
            h2 <span class="token operator">=</span> <span class="token punctuation">(</span>h2 <span class="token operator">*</span> a2 <span class="token operator">-</span> arr<span class="token punctuation">[</span>start <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> aL2 <span class="token operator">+</span> arr<span class="token punctuation">[</span>start <span class="token operator">+</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod2
            <span class="token comment">## 如果重复，则返回重复串的起点</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>h1<span class="token punctuation">,</span> h2<span class="token punctuation">)</span> <span class="token keyword">in</span> seen<span class="token punctuation">:</span>
                <span class="token keyword">return</span> start
            seen<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">(</span>h1<span class="token punctuation">,</span> h2<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">## 没有重复，则返回-1</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复杂度分析：</p><ul><li>时间复杂度：<code>O(nlogn)</code></li><li>空间复杂度：<code>O(n)</code></li></ul><h3 id="_76-最小覆盖子串" tabindex="-1"><a class="header-anchor" href="#_76-最小覆盖子串"><span>76. 最小覆盖子串</span></a></h3>`,7),I={href:"https://leetcode.cn/problems/minimum-window-substring/",target:"_blank",rel:"noopener noreferrer"},N=t(`<p>一、题目</p><p>给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 &quot;&quot; 。</p><p>注意：</p><ul><li>对于 t 中重复字符，我们寻找的子字符串中该字符数量必须不少于 t 中该字符数量。</li><li>如果 s 中存在这样的子串，我们保证它是唯一的答案。</li></ul><p>示例 1：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;
输出：&quot;BANC&quot;
解释：最小覆盖子串 &quot;BANC&quot; 包含来自字符串 t 的 &#39;A&#39;、&#39;B&#39; 和 &#39;C&#39;。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：s = &quot;a&quot;, t = &quot;a&quot;
输出：&quot;a&quot;
解释：整个字符串 s 是最小覆盖子串。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 3:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入: s = &quot;a&quot;, t = &quot;aa&quot;
输出: &quot;&quot;
解释: t 中两个字符 &#39;a&#39; 均应包含在 s 的子串中，
因此没有符合条件的子字符串，返回空字符串。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二、解析</p>`,11),z={href:"https://leetcode.cn/problems/minimum-window-substring/solution/zui-xiao-fu-gai-zi-chuan-by-leetcode-solution/",target:"_blank",rel:"noopener noreferrer"},A=t(`<p>滑动窗口。使用左右两个指针，右指针每次往右走，如果满足条件（或不满足条件），左指针就一直收敛。</p><p>在滑动窗口类型的问题中都会有两个指针，一个用于「延伸」现有窗口的 right 指针，和一个用于「收缩」窗口的 left 指针。在任意时刻，只有一个指针运动，而另一个保持静止。我们在 s 上滑动窗口，通过移动 right 指针不断扩张窗口。当窗口包含全部所需的字符后，如果能收缩，我们就收缩窗口直到得到最小窗口。</p><p>Python 代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">minWindow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> t<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        freq <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">for</span> c <span class="token keyword">in</span> t<span class="token punctuation">:</span>
            <span class="token keyword">if</span> c <span class="token keyword">not</span> <span class="token keyword">in</span> freq<span class="token punctuation">:</span>
                freq<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
            freq<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>

        sLen <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
        maxLen <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;inf&quot;</span><span class="token punctuation">)</span>
        res_left <span class="token operator">=</span> res_right <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
        counts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

        <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> k <span class="token keyword">in</span> freq<span class="token punctuation">:</span>
                <span class="token keyword">if</span> k <span class="token keyword">not</span> <span class="token keyword">in</span> counts <span class="token keyword">or</span> counts<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> freq<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>
                    <span class="token keyword">return</span> <span class="token boolean">False</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>

        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
        <span class="token keyword">while</span> right <span class="token operator">&lt;</span> sLen<span class="token punctuation">:</span>
            right_char <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span>
            <span class="token keyword">if</span> right_char <span class="token keyword">in</span> freq <span class="token keyword">and</span> freq<span class="token punctuation">[</span>right_char<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> right_char <span class="token keyword">not</span> <span class="token keyword">in</span> counts<span class="token punctuation">:</span>
                    counts<span class="token punctuation">[</span>right_char<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
                counts<span class="token punctuation">[</span>right_char<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">while</span> check<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>
                <span class="token keyword">if</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> maxLen<span class="token punctuation">:</span>
                    maxLen <span class="token operator">=</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span>
                    res_left<span class="token punctuation">,</span> res_right <span class="token operator">=</span> left<span class="token punctuation">,</span> left <span class="token operator">+</span> maxLen
                <span class="token keyword">if</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token keyword">in</span> freq<span class="token punctuation">:</span>
                    counts<span class="token punctuation">[</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
                left <span class="token operator">+=</span> <span class="token number">1</span>
            right <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> s<span class="token punctuation">[</span>res_left<span class="token punctuation">:</span>res_right<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Golang 代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">minWindow</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> t <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    ori<span class="token punctuation">,</span> cnt <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">byte</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">byte</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        ori<span class="token punctuation">[</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span>
    <span class="token punctuation">}</span>

    sLen <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
    <span class="token builtin">len</span> <span class="token operator">:=</span> math<span class="token punctuation">.</span>MaxInt32
    ansL<span class="token punctuation">,</span> ansR <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>

    check <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> ori <span class="token punctuation">{</span>
            <span class="token keyword">if</span> cnt<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> v <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> l<span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> sLen<span class="token punctuation">;</span> r<span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> ori<span class="token punctuation">[</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            cnt<span class="token punctuation">[</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;=</span> r <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token builtin">len</span> <span class="token operator">=</span> r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span>
                ansL<span class="token punctuation">,</span> ansR <span class="token operator">=</span> l<span class="token punctuation">,</span> l <span class="token operator">+</span> <span class="token builtin">len</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> ori<span class="token punctuation">[</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
                cnt<span class="token punctuation">[</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
            <span class="token punctuation">}</span>
            l<span class="token operator">++</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> ansL <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> s<span class="token punctuation">[</span>ansL<span class="token punctuation">:</span>ansR<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_316-去除重复字母" tabindex="-1"><a class="header-anchor" href="#_316-去除重复字母"><span>316. 去除重复字母</span></a></h3>`,7),P={href:"https://leetcode-cn.com/problems/remove-duplicate-letters/",title:"316. 去除重复字母",target:"_blank",rel:"noopener noreferrer"},R=t(`<p>一、题目</p><p>给你一个仅包含小写字母的字符串，请你去除字符串中重复的字母，使得每个字母只出现一次。需保证返回结果的字典序最小（要求不能打乱其他字符的相对位置）。</p><p>示例 1:</p><div class="language-纯文本 line-numbers-mode" data-ext="纯文本" data-title="纯文本"><pre class="language-纯文本"><code>输入: &quot;bcabc&quot;
输出: &quot;abc&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>二、解析</p>`,5),B={href:"https://leetcode-cn.com/problems/remove-duplicate-letters/solution/qu-chu-zhong-fu-zi-mu-by-leetcode/",title:"Leetcode官方题解",target:"_blank",rel:"noopener noreferrer"},C=t(`<p>使用栈和哈希表。 栈里面保存中间结果，哈希表保存每个字母最后一次出现的位置。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">removeDuplicateLetters</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        seen <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        last_occurrence <span class="token operator">=</span> <span class="token punctuation">{</span>c<span class="token punctuation">:</span> i <span class="token keyword">for</span> i<span class="token punctuation">,</span> c <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token keyword">for</span> i<span class="token punctuation">,</span> c <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> c <span class="token keyword">not</span> <span class="token keyword">in</span> seen<span class="token punctuation">:</span>
                <span class="token keyword">while</span> stack <span class="token keyword">and</span> c <span class="token operator">&lt;</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">and</span> i <span class="token operator">&lt;</span> last_occurrence<span class="token punctuation">[</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                    seen<span class="token punctuation">.</span>discard<span class="token punctuation">(</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                seen<span class="token punctuation">.</span>add<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>stack<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1081-不同字符的最小子序列" tabindex="-1"><a class="header-anchor" href="#_1081-不同字符的最小子序列"><span>1081. 不同字符的最小子序列</span></a></h3>`,4),V={href:"https://leetcode-cn.com/problems/smallest-subsequence-of-distinct-characters/",title:"1081. 不同字符的最小子序列",target:"_blank",rel:"noopener noreferrer"},T=n("p",null,"和【316. 去除重复字母】相同。",-1),D=n("h3",{id:"_12-整数转罗马数字",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_12-整数转罗马数字"},[n("span",null,"12. 整数转罗马数字")])],-1),X={href:"https://leetcode-cn.com/problems/integer-to-roman/",title:"12. 整数转罗马数字",target:"_blank",rel:"noopener noreferrer"},M=t(`<p>一、题目</p><p>给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。</p><p>二、解析</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">intToRoman</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        roman_numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">&#39;I&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span><span class="token string">&#39;IV&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span><span class="token string">&#39;V&#39;</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">:</span><span class="token string">&#39;IX&#39;</span><span class="token punctuation">,</span>
                         <span class="token number">10</span><span class="token punctuation">:</span><span class="token string">&#39;X&#39;</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">:</span> <span class="token string">&#39;XL&#39;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">:</span><span class="token string">&#39;L&#39;</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">:</span><span class="token string">&#39;XC&#39;</span><span class="token punctuation">,</span> 
                         <span class="token number">100</span><span class="token punctuation">:</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">:</span><span class="token string">&#39;CD&#39;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">:</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">,</span> <span class="token number">900</span><span class="token punctuation">:</span><span class="token string">&#39;CM&#39;</span><span class="token punctuation">,</span> 
                         <span class="token number">1000</span><span class="token punctuation">:</span><span class="token string">&#39;M&#39;</span><span class="token punctuation">}</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> d <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>roman_numbers<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token punctuation">(</span>r<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token builtin">divmod</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> d<span class="token punctuation">)</span>
            <span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>roman_numbers<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token operator">*</span>r<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-罗马数字转整数" tabindex="-1"><a class="header-anchor" href="#_13-罗马数字转整数"><span>13. 罗马数字转整数</span></a></h3>`,6),E={href:"https://leetcode-cn.com/problems/roman-to-integer/",title:"13. 罗马数字转整数",target:"_blank",rel:"noopener noreferrer"},G=t(`<p>一、题目</p><p>罗马数字包含以下七种字符:<code>I</code>，<code>V</code>，<code>X</code>，<code>L</code>，<code>C</code>，<code>D</code>和<code>M</code>。 给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p><p>二、解析</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        roman_map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;I&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;V&#39;</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;X&#39;</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;L&#39;</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">&#39;M&#39;</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">}</span>
        res <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">and</span> roman_map<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> roman_map<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                res <span class="token operator">-=</span> roman_map<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                res <span class="token operator">+=</span> roman_map<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>    
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_556-下一个更大元素-iii" tabindex="-1"><a class="header-anchor" href="#_556-下一个更大元素-iii"><span>556. 下一个更大元素 III</span></a></h3>`,6),O={href:"https://leetcode-cn.com/problems/next-greater-element-iii/",title:"556. 下一个更大元素 III",target:"_blank",rel:"noopener noreferrer"},K=t(`<p>一、题目</p><p>给定一个32位正整数 n，你需要找到最小的 32 位整数，其与 n 中存在的位数完全相同，并且其值大于n。如果不存在这样的32位整数，则返回-1。</p><p>二、解析</p><p>把数字转成字符数组，按字母表的顺序找到可以交换的位置。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        chars <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span>
        right <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">2</span>
        <span class="token keyword">while</span> right <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> chars<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> chars<span class="token punctuation">[</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            right <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> right <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
        <span class="token comment">## 在left右边，找到最后一个大于chars[left]的数字</span>
        left <span class="token operator">=</span> right
        right <span class="token operator">=</span> right <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">while</span> right <span class="token operator">&lt;</span> length <span class="token keyword">and</span> chars<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;</span> chars<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">:</span>
            right <span class="token operator">+=</span> <span class="token number">1</span>
        chars<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> chars<span class="token punctuation">[</span>right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> chars<span class="token punctuation">[</span>right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> chars<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
        <span class="token comment">## left右边的数组进行翻转</span>
        begin <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span>
        end <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> begin <span class="token operator">&lt;</span> end<span class="token punctuation">:</span>
            chars<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">,</span> chars<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> chars<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span> chars<span class="token punctuation">[</span>begin<span class="token punctuation">]</span>
            begin <span class="token operator">+=</span> <span class="token number">1</span>
            end <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token comment">## 计算</span>
        res <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> ch <span class="token keyword">in</span> chars<span class="token punctuation">:</span>
            res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
        <span class="token keyword">return</span> res <span class="token keyword">if</span> res <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_556-1-上一个更小元素" tabindex="-1"><a class="header-anchor" href="#_556-1-上一个更小元素"><span>556-1. 上一个更小元素</span></a></h3><blockquote><p>注意：Leetcode 没有这道题。</p></blockquote><p>一、题目</p><p>给定一个32位正整数 n，你需要找到最大的32位整数，其与 n 中存在的位数完全相同，并且其值小于n。如果不存在这样的32位整数，则返回-1。</p><p>二、解析</p><p>把数字转成字符数组，按字母表的顺序找到可以交换的位置。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">lastSmallerElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        chars <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span>
        right <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">2</span>
        <span class="token keyword">while</span> right <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> chars<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> chars<span class="token punctuation">[</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            right <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> right <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
        <span class="token comment">## 在left右边，找到最后一个小于chars[left]的数字</span>
        left <span class="token operator">=</span> right
        right <span class="token operator">=</span> right <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">while</span> right <span class="token operator">&lt;</span> length <span class="token keyword">and</span> chars<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&lt;</span> chars<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">:</span>
            right <span class="token operator">+=</span> <span class="token number">1</span>
        chars<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> chars<span class="token punctuation">[</span>right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> chars<span class="token punctuation">[</span>right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> chars<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
        <span class="token comment">## 右边的数组进行翻转</span>
        begin <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span>
        end <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> begin <span class="token operator">&lt;</span> end<span class="token punctuation">:</span>
            chars<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">,</span> chars<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> chars<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span> chars<span class="token punctuation">[</span>begin<span class="token punctuation">]</span>
            begin <span class="token operator">+=</span> <span class="token number">1</span>
            end <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> chars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
        res <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> ch <span class="token keyword">in</span> chars<span class="token punctuation">:</span>
            res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_224-基本计算器" tabindex="-1"><a class="header-anchor" href="#_224-基本计算器"><span>224. 基本计算器</span></a></h3>`,14),Z={href:"https://leetcode.cn/problems/basic-calculator/",target:"_blank",rel:"noopener noreferrer"},H=t(`<p>一、题目</p><p>给你一个字符串表达式 <code>s</code> ，请你实现一个基本计算器来计算并返回它的值。</p><p>注意:不允许使用任何将字符串作为数学表达式计算的内置函数，比如 <code>eval()</code> 。</p><p>示例 1：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：s = &quot;1 + 1&quot;
输出：2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：s = &quot; 2-1 + 2 &quot;
输出：3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 3：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：s = &quot;(1+(4+5+2)-3)+(6+8)&quot;
输出：23
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>二、解析</p>`,10),Y={href:"https://leetcode.cn/problems/basic-calculator/solution/ji-ben-ji-suan-qi-by-leetcode-solution-jvir/",title:"https://leetcode.cn/problems/basic-calculator/solution/ji-ben-ji-suan-qi-by-leetcode-solution-jvir/",target:"_blank",rel:"noopener noreferrer"},W=t(`<p>括号展开 + 栈。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">calculate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        ops <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        sign <span class="token operator">=</span> <span class="token number">1</span>

        ret <span class="token operator">=</span> <span class="token number">0</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
        i <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>
            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">:</span>
                i <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">:</span>
                sign <span class="token operator">=</span> ops<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
                i <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">:</span>
                sign <span class="token operator">=</span> <span class="token operator">-</span>ops<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
                i <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">:</span>
                ops<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sign<span class="token punctuation">)</span>
                i <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">:</span>
                ops<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
                i <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                num <span class="token operator">=</span> <span class="token number">0</span>
                <span class="token keyword">while</span> i <span class="token operator">&lt;</span> n <span class="token keyword">and</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    num <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span>
                    i <span class="token operator">+=</span> <span class="token number">1</span>
                ret <span class="token operator">+=</span> num <span class="token operator">*</span> sign
        <span class="token keyword">return</span> ret
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_227-基本计算器-ii" tabindex="-1"><a class="header-anchor" href="#_227-基本计算器-ii"><span>227. 基本计算器 II</span></a></h3>`,4),F={href:"https://leetcode-cn.com/problems/basic-calculator-ii/",title:"227. 基本计算器 II",target:"_blank",rel:"noopener noreferrer"},J=t(`<p>一、题目</p><p>给你一个字符串表达式 s ，请你实现一个基本计算器来计算并返回它的值。</p><p>整数除法仅保留整数部分。</p><p>你可以假设给定的表达式总是有效的。所有中间结果将在 [-231, 231 - 1] 的范围内。</p><p>注意：不允许使用任何将字符串作为数学表达式计算的内置函数，比如 eval() 。</p><p>示例 1：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：s = &quot;3+2*2&quot;
输出：7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：s = &quot; 3/2 &quot;
输出：1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 3：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：s = &quot; 3+5 / 2 &quot;
输出：5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>二、解析</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">calculate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> <span class="token number">0</span>
        sign <span class="token operator">=</span> <span class="token string">&#39;+&#39;</span>
        digit <span class="token operator">=</span> <span class="token number">0</span>
        nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        s <span class="token operator">=</span> s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">:</span> 
                <span class="token keyword">continue</span>
            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
                digit <span class="token operator">=</span> digit <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">or</span> i <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> sign <span class="token operator">==</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">:</span>
                    nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span>digit<span class="token punctuation">)</span>
                <span class="token keyword">elif</span> sign <span class="token operator">==</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">:</span>
                    nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token operator">-</span>digit<span class="token punctuation">)</span>
                <span class="token keyword">elif</span> sign <span class="token operator">==</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">:</span>
                    tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> digit
                    nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp
                <span class="token keyword">elif</span> sign <span class="token operator">==</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">:</span>
                    <span class="token comment">## print(nums, digit)</span>
                    tmp <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">//</span> digit
                    <span class="token keyword">if</span> nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                        tmp <span class="token operator">=</span> <span class="token operator">-</span>tmp
                    nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp
                digit <span class="token operator">=</span> <span class="token number">0</span>
                sign <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                
        <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_394-字符串解码" tabindex="-1"><a class="header-anchor" href="#_394-字符串解码"><span>394. 字符串解码</span></a></h3>`,15),Q={href:"https://leetcode.cn/problems/decode-string/",target:"_blank",rel:"noopener noreferrer"},U=t(`<p>一、题目</p><p>给定一个经过编码的字符串，返回它解码后的字符串。</p><p>编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。</p><p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。</p><p>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。</p><p>示例 1：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：s = &quot;3[a]2[bc]&quot;
输出：&quot;aaabcbc&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：s = &quot;3[a2[c]]&quot;
输出：&quot;accaccacc&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 3：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：s = &quot;2[abc]3[cd]ef&quot;
输出：&quot;abcabccdcdcdef&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 4：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：s = &quot;abc3[cd]xyz&quot;
输出：&quot;abccdcdcdxyz&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>提示：</p><ul><li>0 &lt;= s.length &lt;= 30</li><li>s 由小写英文字母、数字和方括号 &#39;[]&#39; 组成</li><li>s 保证是一个 有效 的输入。</li><li>s 中所有整数的取值范围为 [1, 300] </li></ul><p>二、解析</p>`,16),$={href:"https://leetcode.cn/problems/decode-string/solution/decode-string-fu-zhu-zhan-fa-di-gui-fa-by-jyd/",title:"https://leetcode.cn/problems/decode-string/solution/decode-string-fu-zhu-zhan-fa-di-gui-fa-by-jyd/",target:"_blank",rel:"noopener noreferrer"},nn=t(`<p>1）使用栈。</p><p>构建辅助栈 stack， 遍历字符串 s 中每个字符 c；</p><ul><li>当 c 为数字时，将数字字符转化为数字 multi，用于后续倍数计算；</li><li>当 c 为字母时，在 res 尾部添加 c；</li><li>当 c 为 [ 时，将当前 multi 和 res 入栈，并分别置空置 0： <ul><li>记录此 [ 前的临时结果 res 至栈，用于发现对应 ] 后的拼接操作；</li><li>记录此 [ 前的倍数 multi 至栈，用于发现对应 ] 后，获取 multi × [...] 字符串。</li><li>进入到新 [ 后，res 和 multi 重新记录。</li></ul></li><li>当 c 为 ] 时，stack 出栈，拼接字符串 res = last_res + cur_multi * res，其中: <ul><li>last_res是上个 [ 到当前 [ 的字符串，例如 &quot;3[a2[c]]&quot; 中的 a；</li><li>cur_multi是当前 [ 到 ] 内字符串的重复倍数，例如 &quot;3[a2[c]]&quot; 中的 2。</li></ul></li></ul><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">decodeString</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        stack<span class="token punctuation">,</span> res<span class="token punctuation">,</span> multi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span>
        <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>
            <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">&#39;[&#39;</span><span class="token punctuation">:</span>
                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>multi<span class="token punctuation">,</span> res<span class="token punctuation">]</span><span class="token punctuation">)</span>
                res<span class="token punctuation">,</span> multi <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span>
            <span class="token keyword">elif</span> c <span class="token operator">==</span> <span class="token string">&#39;]&#39;</span><span class="token punctuation">:</span>
                cur_multi<span class="token punctuation">,</span> last_res <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
                res <span class="token operator">=</span> last_res <span class="token operator">+</span> cur_multi <span class="token operator">*</span> res
            <span class="token keyword">elif</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">&lt;=</span> c <span class="token operator">&lt;=</span> <span class="token string">&#39;9&#39;</span><span class="token punctuation">:</span>
                multi <span class="token operator">=</span> multi <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>            
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                res <span class="token operator">+=</span> c
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）递归。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">decodeString</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
            res<span class="token punctuation">,</span> multi <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span>
            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">&lt;=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">&#39;9&#39;</span><span class="token punctuation">:</span>
                    multi <span class="token operator">=</span> multi <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;[&#39;</span><span class="token punctuation">:</span>
                    i<span class="token punctuation">,</span> tmp <span class="token operator">=</span> dfs<span class="token punctuation">(</span>s<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
                    res <span class="token operator">+=</span> multi <span class="token operator">*</span> tmp
                    multi <span class="token operator">=</span> <span class="token number">0</span>
                <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;]&#39;</span><span class="token punctuation">:</span>
                    <span class="token keyword">return</span> i<span class="token punctuation">,</span> res
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    res <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                i <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">return</span> res
        <span class="token keyword">return</span> dfs<span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_443-压缩字符串" tabindex="-1"><a class="header-anchor" href="#_443-压缩字符串"><span>443. 压缩字符串</span></a></h3>`,9),sn={href:"https://leetcode-cn.com/problems/string-compression/",title:"443. 压缩字符串",target:"_blank",rel:"noopener noreferrer"},an=t(`<p>一、题目</p><p>给你一个字符数组 chars ，请使用下述算法压缩：</p><p>从一个空字符串 s 开始。对于 chars 中的每组 连续重复字符 ：</p><ul><li>如果这一组长度为 1 ，则将字符追加到 s 中。</li><li>否则，需要向 s 追加字符，后跟这一组的长度。</li></ul><p>压缩后得到的字符串 s 不应该直接返回 ，需要转储到字符数组 chars 中。需要注意的是，如果组长度为 10 或 10 以上，则在 chars 数组中会被拆分为多个字符。</p><p>请在 修改完输入数组后 ，返回该数组的新长度。</p><p>你必须设计并实现一个只使用常量额外空间的算法来解决此问题。</p><p>示例1：</p><div class="language-纯文本 line-numbers-mode" data-ext="纯文本" data-title="纯文本"><pre class="language-纯文本"><code>输入：chars = [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]
输出：返回 6 ，输入数组的前 6 个字符应该是：[&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;]
解释：&quot;aa&quot; 被 &quot;a2&quot; 替代。&quot;bb&quot; 被 &quot;b2&quot; 替代。&quot;ccc&quot; 被 &quot;c3&quot; 替代。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例2：</p><div class="language-纯文本 line-numbers-mode" data-ext="纯文本" data-title="纯文本"><pre class="language-纯文本"><code>输入：chars = [&quot;a&quot;]
输出：返回 1 ，输入数组的前 1 个字符应该是：[&quot;a&quot;]
解释：唯一的组是“a”，它保持未压缩，因为它是一个字符。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二、解析</p>`,12),pn={href:"https://leetcode-cn.com/problems/string-compression/solution/ya-suo-zi-fu-chuan-by-leetcode/",title:"Leetcode官方题解",target:"_blank",rel:"noopener noreferrer"},tn=t(`<p>双指针。我们可以使用双指针分别标志我们在字符串中读和写的位置。每次当读指针 read 移动到某一段连续相同子串的最右侧，我们就在写指针 write 处依次写入该子串对应的字符和子串长度即可</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">compress</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> chars<span class="token punctuation">)</span><span class="token punctuation">:</span>
        anchor <span class="token operator">=</span> write <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> read<span class="token punctuation">,</span> c <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> read <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span> <span class="token keyword">or</span> chars<span class="token punctuation">[</span>read <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> c<span class="token punctuation">:</span>
                chars<span class="token punctuation">[</span>write<span class="token punctuation">]</span> <span class="token operator">=</span> chars<span class="token punctuation">[</span>anchor<span class="token punctuation">]</span>
                write <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">if</span> read <span class="token operator">&gt;</span> anchor<span class="token punctuation">:</span>
                    <span class="token keyword">for</span> digit <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>read <span class="token operator">-</span> anchor <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                        chars<span class="token punctuation">[</span>write<span class="token punctuation">]</span> <span class="token operator">=</span> digit
                        write <span class="token operator">+=</span> <span class="token number">1</span>
                anchor <span class="token operator">=</span> read <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">return</span> write
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-z-字形变换" tabindex="-1"><a class="header-anchor" href="#_6-z-字形变换"><span>6. Z 字形变换</span></a></h3>`,4),en={href:"https://leetcode-cn.com/problems/zigzag-conversion/",title:"6. Z 字形变换",target:"_blank",rel:"noopener noreferrer"},on=t(`<p>一、题目</p><p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</p><p>将一个给定字符串 <code>s</code> 根据给定的行数 <code>numRows</code> ，以从上往下、从左到右进行 Z 字形排列。</p><p>比如输入字符串为 <code>&quot;PAYPALISHIRING&quot;</code> 行数为 <code>3</code> 时，排列如下：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>P   A   H   N
A P L S I I G
Y   I   R
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：<code>&quot;PAHNAPLSIIGYIR&quot;</code>。</p><p>二、解析</p><p>设置一个flag变量。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">convert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> numRows<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> numRows <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> s
        
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>numRows<span class="token punctuation">)</span><span class="token punctuation">]</span>
        row <span class="token operator">=</span> <span class="token number">0</span>
        flag <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>
            res<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
            <span class="token keyword">if</span> row <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                flag <span class="token operator">=</span> <span class="token number">1</span>
            <span class="token keyword">elif</span> row <span class="token operator">==</span> numRows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
                flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
            row <span class="token operator">+=</span> flag 
        <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_696-计数二进制子串" tabindex="-1"><a class="header-anchor" href="#_696-计数二进制子串"><span>696. 计数二进制子串</span></a></h3>`,11),cn={href:"https://leetcode-cn.com/problems/count-binary-substrings/",title:"696. 计数二进制子串",target:"_blank",rel:"noopener noreferrer"},ln=t(`<p>一、题目</p><p>给定一个字符串<code>s</code>，计算具有相同数量0和1的非空(连续)子字符串的数量，并且这些子字符串中的所有0和所有1都是组合在一起的。 重复出现的子串要计算它们出现的次数。</p><p>示例 1：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：s = &quot;00110011&quot;
输出：6
解释：6 个子串满足具有相同数量的连续 1 和 0 ：&quot;0011&quot;、&quot;01&quot;、&quot;1100&quot;、&quot;10&quot;、&quot;0011&quot; 和 &quot;01&quot; 。
注意，一些重复出现的子串（不同位置）要统计它们出现的次数。
另外，&quot;00110011&quot; 不是有效的子串，因为所有的 0（还有 1 ）没有组合在一起。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二、解析</p>`,5),un={href:"https://leetcode-cn.com/problems/count-binary-substrings/solution/ji-shu-er-jin-zhi-zi-chuan-by-leetcode/",title:"Leetcode官方题解",target:"_blank",rel:"noopener noreferrer"},rn=t(`<p>1）中心扩展法</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">countBinarySubstrings</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        count <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                count <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                        <span class="token keyword">break</span>
                    count <span class="token operator">+=</span> <span class="token number">1</span>                    
        <span class="token keyword">return</span> count
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）线性扫描</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">countBinarySubstrings</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>
        ans<span class="token punctuation">,</span> prev<span class="token punctuation">,</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
                ans <span class="token operator">+=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">)</span>
                prev<span class="token punctuation">,</span> cur <span class="token operator">=</span> cur<span class="token punctuation">,</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                cur <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> ans <span class="token operator">+</span> <span class="token builtin">min</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1071-字符串的最大公因子" tabindex="-1"><a class="header-anchor" href="#_1071-字符串的最大公因子"><span>1071. 字符串的最大公因子</span></a></h3>`,5),kn={href:"https://leetcode-cn.com/problems/greatest-common-divisor-of-strings/",title:"1071. 字符串的最大公因子",target:"_blank",rel:"noopener noreferrer"},dn=t(`<p>一、题目</p><p>对于字符串<code>S</code>和<code>T</code>，只有在<code>S = T + ... + T</code>（<code>T</code>与自身连接 1 次或多次）时，我们才认定“<code>T</code> 能除尽 <code>S</code>”。 返回最长字符串<code>X</code>，要求满足<code>X</code>能除尽<code>str1</code>且<code>X</code>能除尽<code>str2</code>。</p><p>二、解析</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">gcdOfStrings</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> str1<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> str2<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> a
            <span class="token keyword">return</span> gcd<span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span>
        
        <span class="token keyword">if</span> str1 <span class="token operator">+</span> str2 <span class="token operator">!=</span> str2 <span class="token operator">+</span> str1<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
        <span class="token keyword">return</span> str1<span class="token punctuation">[</span><span class="token punctuation">:</span>gcd<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_415-字符串相加" tabindex="-1"><a class="header-anchor" href="#_415-字符串相加"><span>415. 字符串相加</span></a></h3>`,6),vn={href:"https://leetcode-cn.com/problems/add-strings/",title:"415. 字符串相加",target:"_blank",rel:"noopener noreferrer"},bn=t(`<p>一、题目</p><p>给定两个字符串形式的非负整数 num1 和num2 ，计算它们的和。</p><p>二、解析</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">addStrings</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num1<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> num2<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        len1 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span>
        len2 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span>
        i <span class="token operator">=</span> len1 <span class="token operator">-</span> <span class="token number">1</span>
        j <span class="token operator">=</span> len2 <span class="token operator">-</span> <span class="token number">1</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        carry <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">or</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">or</span> carry <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            d1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span>
            d2 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span>
            temp <span class="token operator">=</span> d1 <span class="token operator">+</span> d2 <span class="token operator">+</span> carry
            carry<span class="token punctuation">,</span> temp <span class="token operator">=</span> <span class="token builtin">divmod</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span>
            i <span class="token operator">-=</span> <span class="token number">1</span>
            j <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_43-字符串相乘" tabindex="-1"><a class="header-anchor" href="#_43-字符串相乘"><span>43. 字符串相乘</span></a></h3>`,6),mn={href:"https://leetcode-cn.com/problems/multiply-strings/",title:"43. 字符串相乘",target:"_blank",rel:"noopener noreferrer"},gn=n("p",null,"一、题目",-1),hn=n("p",null,"给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。",-1),yn=n("p",null,"二、解析",-1),wn={href:"https://leetcode-cn.com/problems/multiply-strings/solution/zi-fu-chuan-xiang-cheng-by-leetcode-solution/",title:"官方题解",target:"_blank",rel:"noopener noreferrer"},fn=t(`<p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">multiply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num1<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> num2<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> num1 <span class="token operator">==</span> <span class="token string">&quot;0&quot;</span> <span class="token keyword">or</span> num2 <span class="token operator">==</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">&quot;0&quot;</span>
        
        m<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span>
        ansArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">+</span> n<span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                ansArr<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> x <span class="token operator">*</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
        
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            ansArr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> ansArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">//</span> <span class="token number">10</span>
            ansArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">10</span>
        
        index <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">if</span> ansArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span>
        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> ansArr<span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_424-替换后的最长重复字符" tabindex="-1"><a class="header-anchor" href="#_424-替换后的最长重复字符"><span>424. 替换后的最长重复字符</span></a></h3>`,3),qn={href:"https://leetcode-cn.com/problems/longest-repeating-character-replacement/",title:"424. 替换后的最长重复字符",target:"_blank",rel:"noopener noreferrer"},_n=t(`<p>一、题目</p><p>给你一个仅由大写英文字母组成的字符串，你可以将任意位置上的字符替换成另外的字符，总共可最多替换 <em>k</em> 次。在执行上述操作后，找到包含重复字母的最长子串的长度。</p><p><strong>示例 1：</strong></p><div class="language-纯文本 line-numbers-mode" data-ext="纯文本" data-title="纯文本"><pre class="language-纯文本"><code>输入：s = &quot;ABAB&quot;, k = 2
输出：4
解释：用两个&#39;A&#39;替换为两个&#39;B&#39;,反之亦然。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二、解析</p>`,5),xn={href:"https://leetcode.cn/problems/longest-repeating-character-replacement/solutions/",target:"_blank",rel:"noopener noreferrer"},jn=t(`<p>使用双指针。使用左右两个指针，右指针每次往右走，如果满足条件（或不满足条件），左指针只收敛一次。之前遇到过左指针一直收缩，参考【3. 无重复字符的最长子串】。</p><p>通过枚举字符串中的每一个位置作为右端点，然后找到其最远的左端点的位置，满足该区间内除了出现次数最多的那一类字符之外，剩余的字符（即非最长重复字符）数量不超过 k 个。</p><p>这样我们可以想到使用双指针维护这些区间，每次右指针右移，如果区间仍然满足条件，那么左指针不移动，否则左指针至多右移一格，保证区间长度不减小。</p><p>另外，每次区间右移，我们更新右移位置的字符出现的次数，然后尝试用它更新重复字符出现次数的历史最大值，最后我们使用该最大值计算出区间内非最长重复字符的数量，以此判断左指针是否需要右移即可。</p><p>Python 代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">characterReplacement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        nums <span class="token operator">=</span> <span class="token punctuation">{</span>c<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">}</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
        maxn <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 窗口中曾出现某字母的最大次数</span>
        left <span class="token operator">=</span> right <span class="token operator">=</span> <span class="token number">0</span>

        <span class="token keyword">while</span> right <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>
            nums<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
            maxn <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>maxn<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> maxn <span class="token operator">&gt;</span> k<span class="token punctuation">:</span>
                nums<span class="token punctuation">[</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
                left <span class="token operator">+=</span> <span class="token number">1</span>
            right <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> right <span class="token operator">-</span> left
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_165-比较版本号" tabindex="-1"><a class="header-anchor" href="#_165-比较版本号"><span>165. 比较版本号</span></a></h3>`,7),Sn={href:"https://leetcode.cn/problems/compare-version-numbers/",target:"_blank",rel:"noopener noreferrer"},Ln=t(`<p>一、题目</p><p>给你两个版本号 <code>version1</code> 和 <code>version2</code> ，请你比较它们。</p><p>版本号由一个或多个修订号组成，各修订号由一个 <code>&#39;.&#39;</code> 连接。每个修订号由 <strong>多位数字</strong> 组成，可能包含 <strong>前导零</strong> 。每个版本号至少包含一个字符。修订号从左到右编号，下标从 0 开始，最左边的修订号下标为 0 ，下一个修订号下标为 1 ，以此类推。例如，<code>2.5.33</code> 和 <code>0.1</code> 都是有效的版本号。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：version1 = &quot;1.01&quot;, version2 = &quot;1.001&quot;
输出：0
解释：忽略前导零，&quot;01&quot; 和 &quot;001&quot; 都表示相同的整数 &quot;1&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二、解析</p>`,6),In={href:"https://leetcode.cn/problems/compare-version-numbers/solutions/970416/bi-jiao-ban-ben-hao-by-leetcode-solution-k6wi/",target:"_blank",rel:"noopener noreferrer"},Nn=t(`<p>使用两个指针。</p><p>Python 代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">compareVersion</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> version1<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> version2<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>version1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>version2<span class="token punctuation">)</span>
        i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> n <span class="token keyword">or</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">:</span>
            x <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> n <span class="token keyword">and</span> version1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">:</span>
                x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>version1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span>
                i <span class="token operator">+=</span> <span class="token number">1</span>
            i <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 跳过点号</span>
            y <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> m <span class="token keyword">and</span> version2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">:</span>
                y <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>version2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span>
                j <span class="token operator">+=</span> <span class="token number">1</span>
            j <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 跳过点号</span>
            <span class="token keyword">if</span> x <span class="token operator">!=</span> y<span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token number">1</span> <span class="token keyword">if</span> x <span class="token operator">&gt;</span> y <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Golang 代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">compareVersion</span><span class="token punctuation">(</span>version1<span class="token punctuation">,</span> version2 <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    n<span class="token punctuation">,</span> m <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>version1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>version2<span class="token punctuation">)</span>
    i<span class="token punctuation">,</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token operator">&lt;</span> n <span class="token operator">||</span> j <span class="token operator">&lt;</span> m <span class="token punctuation">{</span>
        x <span class="token operator">:=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> version1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
            x <span class="token operator">=</span> x<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token function">int</span><span class="token punctuation">(</span>version1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        i<span class="token operator">++</span> <span class="token comment">// 跳过点号</span>
        y <span class="token operator">:=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> version2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
            y <span class="token operator">=</span> y<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token function">int</span><span class="token punctuation">(</span>version2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        j<span class="token operator">++</span> <span class="token comment">// 跳过点号</span>
        <span class="token keyword">if</span> x <span class="token operator">&gt;</span> y <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">1</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> x <span class="token operator">&lt;</span> y <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他编程题" tabindex="-1"><a class="header-anchor" href="#其他编程题"><span>其他编程题</span></a></h2><h3 id="汉字读法的整数转为阿拉伯数字" tabindex="-1"><a class="header-anchor" href="#汉字读法的整数转为阿拉伯数字"><span>汉字读法的整数转为阿拉伯数字</span></a></h3><p>一、题目</p><p>示例：</p><div class="language-纯文本 line-numbers-mode" data-ext="纯文本" data-title="纯文本"><pre class="language-纯文本"><code>五千四百零三万一千二百
54031200
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>二、解析</p><p>不完全正确。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">chinese2int</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;string表示的数字小于一亿&quot;&quot;&quot;</span>
    digits_map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;零&quot;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;一&quot;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;二&quot;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;三&quot;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;四&quot;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&quot;五&quot;</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> 
                  <span class="token string">&quot;六&quot;</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&quot;七&quot;</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">&quot;八&quot;</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">&quot;九&quot;</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">&quot;十&quot;</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span>
    unit_map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;千&quot;</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">&quot;百&quot;</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&quot;十&quot;</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;零&quot;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> digits_map<span class="token punctuation">[</span>string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    num <span class="token operator">=</span> <span class="token number">0</span>
    i <span class="token operator">=</span> <span class="token number">0</span>
    N <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">:</span>
        <span class="token keyword">if</span> i <span class="token operator">&lt;</span> N <span class="token keyword">and</span> string<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;万&quot;</span><span class="token punctuation">:</span>
            num <span class="token operator">*=</span> <span class="token number">10000</span>
            i <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> i <span class="token operator">==</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
            num <span class="token operator">+=</span> digits_map<span class="token punctuation">[</span>string<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
            i <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">break</span>
        end <span class="token operator">=</span> i
        <span class="token keyword">while</span> end <span class="token operator">&lt;</span> N <span class="token keyword">and</span> string<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> unit_map<span class="token punctuation">:</span>
            end <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> i <span class="token operator">==</span> end<span class="token punctuation">:</span>
            <span class="token keyword">if</span> string<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;零&quot;</span><span class="token punctuation">:</span>
                end <span class="token operator">+=</span> <span class="token number">1</span>
                temp <span class="token operator">=</span> digits_map<span class="token punctuation">[</span>string<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">]</span>
                end <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">if</span> end <span class="token operator">&lt;</span> N <span class="token keyword">and</span> string<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;十&quot;</span><span class="token punctuation">:</span>
                    temp <span class="token operator">*=</span> <span class="token number">10</span>
                    end <span class="token operator">+=</span> <span class="token number">1</span>
                num <span class="token operator">+=</span> temp
            <span class="token keyword">elif</span> string<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;十&quot;</span><span class="token punctuation">:</span>
                num <span class="token operator">+=</span> <span class="token number">10</span>
                end <span class="token operator">+=</span> <span class="token number">1</span>
                num <span class="token operator">+=</span> digits_map<span class="token punctuation">[</span>string<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">]</span>
                end <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">elif</span> end <span class="token operator">&lt;</span> N<span class="token punctuation">:</span>
            num <span class="token operator">+=</span> digits_map<span class="token punctuation">[</span>string<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">*</span> unit_map<span class="token punctuation">[</span>string<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">]</span>
            end <span class="token operator">+=</span> <span class="token number">1</span>
        i <span class="token operator">=</span> end
    <span class="token keyword">return</span> num


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    test_cases <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;零&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                  <span class="token punctuation">[</span><span class="token string">&quot;一&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                  <span class="token punctuation">[</span><span class="token string">&quot;十&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                  <span class="token punctuation">[</span><span class="token string">&quot;十一&quot;</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                  <span class="token punctuation">[</span><span class="token string">&quot;二十&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                  <span class="token punctuation">[</span><span class="token string">&quot;一百&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                  <span class="token punctuation">[</span><span class="token string">&quot;一百零一&quot;</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                  <span class="token punctuation">[</span><span class="token string">&quot;一百一十一&quot;</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                  <span class="token punctuation">[</span><span class="token string">&quot;一千&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                  <span class="token punctuation">[</span><span class="token string">&quot;一千零一&quot;</span><span class="token punctuation">,</span> <span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                  <span class="token punctuation">[</span><span class="token string">&quot;五千零二十万一千二百零五&quot;</span><span class="token punctuation">,</span> <span class="token number">50201205</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> string<span class="token punctuation">,</span> ans <span class="token keyword">in</span> test_cases<span class="token punctuation">:</span>
        res <span class="token operator">=</span> chinese2int<span class="token punctuation">(</span>string<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function zn(An,Pn){const a=o("ExternalLinkIcon");return c(),l("div",null,[i(" more "),r,n("blockquote",null,[n("p",null,[n("a",k,[s("28. 实现 strStr()"),p(a)])])]),d,n("blockquote",null,[n("p",null,[s("参考 "),n("a",v,[s("小白之KMP算法详解及python实现"),p(a)])])]),b,n("blockquote",null,[n("p",null,[n("a",m,[s("8. 字符串转换整数 (atoi)"),p(a)])])]),g,n("blockquote",null,[n("p",null,[n("a",h,[s("3. 无重复字符的最长子串"),p(a)])])]),y,n("blockquote",null,[n("p",null,[s("参考 "),n("a",w,[s("Leetcode-powcai"),p(a)])])]),f,n("blockquote",null,[n("p",null,[n("a",q,[s("1044. 最长重复子串"),p(a)])])]),_,n("blockquote",null,[n("p",null,[n("a",x,[s("[Python] 今天这题太难了我真不会"),p(a)])])]),j,n("blockquote",null,[n("p",null,[n("a",S,[s("官方题解"),p(a)])])]),L,n("blockquote",null,[n("p",null,[n("a",I,[s("76. 最小覆盖子串"),p(a)])])]),N,n("blockquote",null,[n("p",null,[n("a",z,[s("官方题解"),p(a)])])]),A,n("blockquote",null,[n("p",null,[n("a",P,[s("316. 去除重复字母"),p(a)])])]),R,n("blockquote",null,[n("p",null,[s("参考 "),n("a",B,[s("Leetcode官方题解"),p(a)])])]),C,n("blockquote",null,[n("p",null,[n("a",V,[s("1081. 不同字符的最小子序列"),p(a)])])]),T,D,n("blockquote",null,[n("p",null,[n("a",X,[s("12. 整数转罗马数字"),p(a)])])]),M,n("blockquote",null,[n("p",null,[n("a",E,[s("13. 罗马数字转整数"),p(a)])])]),G,n("blockquote",null,[n("p",null,[n("a",O,[s("556. 下一个更大元素 III"),p(a)])])]),K,n("blockquote",null,[n("p",null,[n("a",Z,[s("224. 基本计算器"),p(a)])])]),H,n("blockquote",null,[n("p",null,[n("a",Y,[s("官方题解"),p(a)])])]),W,n("blockquote",null,[n("p",null,[n("a",F,[s("227. 基本计算器 II"),p(a)])])]),J,n("blockquote",null,[n("p",null,[n("a",Q,[s("394. 字符串解码"),p(a)])])]),U,n("blockquote",null,[n("p",null,[n("a",$,[s("https://leetcode.cn/problems/decode-string/solution/decode-string-fu-zhu-zhan-fa-di-gui-fa-by-jyd/"),p(a)])])]),nn,n("blockquote",null,[n("p",null,[n("a",sn,[s("443. 压缩字符串"),p(a)])])]),an,n("blockquote",null,[n("p",null,[s("参考 "),n("a",pn,[s("Leetcode官方题解"),p(a)])])]),tn,n("blockquote",null,[n("p",null,[n("a",en,[s("6. Z 字形变换"),p(a)])])]),on,n("blockquote",null,[n("p",null,[n("a",cn,[s("696. 计数二进制子串"),p(a)])])]),ln,n("blockquote",null,[n("p",null,[s("参考 "),n("a",un,[s("Leetcode官方题解"),p(a)])])]),rn,n("blockquote",null,[n("p",null,[n("a",kn,[s("1071. 字符串的最大公因子"),p(a)])])]),dn,n("blockquote",null,[n("p",null,[n("a",vn,[s("415. 字符串相加"),p(a)])])]),bn,n("blockquote",null,[n("p",null,[n("a",mn,[s("43. 字符串相乘"),p(a)])])]),gn,hn,yn,n("blockquote",null,[n("p",null,[s("参考 "),n("a",wn,[s("官方题解"),p(a)])])]),fn,n("blockquote",null,[n("p",null,[n("a",qn,[s("424. 替换后的最长重复字符"),p(a)])])]),_n,n("blockquote",null,[n("p",null,[n("a",xn,[s("官方题解"),p(a)])])]),jn,n("blockquote",null,[n("p",null,[n("a",Sn,[s("165. 比较版本号"),p(a)])])]),Ln,n("blockquote",null,[n("p",null,[n("a",In,[s("官方题解"),p(a)])])]),Nn])}const Cn=e(u,[["render",zn],["__file","string.html.vue"]]);export{Cn as default};
