import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as l,d as i,a as n,e as s,b as t,f as p}from"./app-qKT_MvSj.js";const u={},r=n("h2",{id:"leetcode-编程题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#leetcode-编程题"},[n("span",null,"Leetcode 编程题")])],-1),k=n("h3",{id:"lcr-187-圆圈中最后剩下的数字",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#lcr-187-圆圈中最后剩下的数字"},[n("span",null,"LCR 187. 圆圈中最后剩下的数字")])],-1),d={href:"https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/",title:"剑指 Offer 62. 圆圈中最后剩下的数字",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"一、题目",-1),m=n("p",null,"0,1,...,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。",-1),b=n("p",null,"例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。",-1),h=n("p",null,"二、解析",-1),g={href:"https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solution/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-by-lee/",title:"LeetCode-Solution",target:"_blank",rel:"noopener noreferrer"},f={href:"https://blog.csdn.net/u011500062/article/details/72855826",title:"约瑟夫环——公式法（递推公式）",target:"_blank",rel:"noopener noreferrer"},y=p(`<p>1）使用数组模拟，超时。</p><p>2）数学+递归。代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># Python 默认的递归深度不够，需要手动设置</span>
sys<span class="token punctuation">.</span>setrecursionlimit<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">lastRemaining</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token number">0</span>
            x <span class="token operator">=</span> f<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>m <span class="token operator">+</span> x<span class="token punctuation">)</span> <span class="token operator">%</span> n
        
        <span class="token keyword">return</span> f<span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）递推公式</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">lastRemaining</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">+</span> m<span class="token punctuation">)</span> <span class="token operator">%</span> i
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_172-阶乘后的零" tabindex="-1"><a class="header-anchor" href="#_172-阶乘后的零"><span>172. 阶乘后的零</span></a></h3>`,6),x={href:"https://leetcode-cn.com/problems/factorial-trailing-zeroes/",title:"172. 阶乘后的零",target:"_blank",rel:"noopener noreferrer"},_=p(`<p>一、题目</p><p>给定一个整数 <code>n</code> ，返回 <code>n!</code> 结果中尾随零的数量。</p><p>提示：<code>n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1</code></p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：n = 3
输出：0
解释：3! = 6 ，不含尾随 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二、解析</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> n <span class="token operator">&gt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>
            res <span class="token operator">+=</span> n <span class="token operator">//</span> <span class="token number">5</span>
            n <span class="token operator">//=</span> <span class="token number">5</span>
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_233-数字-1-的个数" tabindex="-1"><a class="header-anchor" href="#_233-数字-1-的个数"><span>233. 数字 1 的个数</span></a></h3>`,9),w={href:"https://leetcode-cn.com/problems/number-of-digit-one/",title:"233. 数字 1 的个数",target:"_blank",rel:"noopener noreferrer"},q=p(`<p>一、题目</p><p>给定一个整数 n，计算所有小于等于 n 的非负整数中数字 1 出现的个数。</p><p>示例:</p><div class="language-纯文本 line-numbers-mode" data-ext="纯文本" data-title="纯文本"><pre class="language-纯文本"><code>输入: 13
输出: 6 
解释: 数字 1 出现在以下数字中: 1, 10, 11, 12, 13 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二、解析</p>`,5),I={href:"https://leetcode-cn.com/problems/number-of-digit-one/solution/shu-zi-1-de-ge-shu-by-leetcode/",title:"Leetcode官方题解",target:"_blank",rel:"noopener noreferrer"},S=p(`<p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">countDigitOne</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        count <span class="token operator">=</span> <span class="token number">0</span>
        i <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">while</span> n <span class="token operator">//</span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            high <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> i<span class="token punctuation">)</span>
            cur <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">//</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span>
            low <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">//</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> i
            <span class="token keyword">if</span> cur <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                count <span class="token operator">+=</span> high <span class="token operator">*</span> i
            <span class="token keyword">elif</span> cur <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
                count <span class="token operator">+=</span> high <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token punctuation">(</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                count <span class="token operator">+=</span> <span class="token punctuation">(</span>high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> i
            i <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">10</span>
        <span class="token keyword">return</span> count
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="面试题-08-04-幂集" tabindex="-1"><a class="header-anchor" href="#面试题-08-04-幂集"><span>面试题 08.04. 幂集</span></a></h3>`,3),D={href:"https://leetcode-cn.com/problems/power-set-lcci/",title:"面试题 08.04. 幂集",target:"_blank",rel:"noopener noreferrer"},N=p(`<p>一、题目</p><p>幂集。编写一种方法，返回某集合的所有子集。集合中不包含重复的元素。</p><p>说明：解集不能包含重复的子集。</p><p>二、解析</p><p>1）使用位图，每个二进制位是否选择一个数字，0表示不选择，1表示选择。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">subsets</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        output <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span>n<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">**</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># generate bitmask, from 0..00 to 1..11</span>
            bitmask <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
            output<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">if</span> bitmask<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        
        <span class="token keyword">return</span> output
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）DFS</p><p>与78相同。</p><h3 id="_343-整数拆分" tabindex="-1"><a class="header-anchor" href="#_343-整数拆分"><span>343. 整数拆分</span></a></h3>`,10),M={href:"https://leetcode-cn.com/problems/integer-break/",title:"343. 整数拆分",target:"_blank",rel:"noopener noreferrer"},L=n("p",null,"一、题目",-1),R=n("p",null,[s("给定一个正整数 n，将其拆分为"),n("strong",null,"至少"),s("两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。")],-1),j=n("p",null,"二、解析",-1),z={href:"https://leetcode-cn.com/problems/integer-break/solution/343-zheng-shu-chai-fen-tan-xin-by-jyd/",title:"Leetcode-Krahets",target:"_blank",rel:"noopener noreferrer"},A=p(`<p>把整数拆分出较多的3，注意4需要拆分成两个2。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">integerBreak</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> n <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">3</span> <span class="token operator">**</span> <span class="token punctuation">(</span>n<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">3</span> <span class="token operator">**</span> <span class="token punctuation">(</span>n<span class="token operator">//</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span>
        <span class="token keyword">return</span> <span class="token number">3</span> <span class="token operator">**</span> <span class="token punctuation">(</span>n<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_470-用-rand7-实现-rand10" tabindex="-1"><a class="header-anchor" href="#_470-用-rand7-实现-rand10"><span>470. 用 Rand7() 实现 Rand10()</span></a></h3>`,4),C={href:"https://leetcode-cn.com/problems/implement-rand10-using-rand7/",title:"470. 用 Rand7() 实现 Rand10()",target:"_blank",rel:"noopener noreferrer"},P=p(`<p>一、题目</p><p>已有方法 rand7 可生成 1 到 7 范围内的均匀随机整数，试写一个方法 rand10 生成 1 到 10 范围内的均匀随机整数。</p><p>不要使用系统的 Math.random() 方法。</p><p>二、解析</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">rand10</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> <span class="token number">49</span>
        <span class="token keyword">while</span> res <span class="token operator">&gt;</span> <span class="token number">40</span><span class="token punctuation">:</span>
            res <span class="token operator">=</span> <span class="token punctuation">(</span>rand7<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">+</span> rand7<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 1 - 40</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>res <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_470-1-用-rand3-实现-rand5" tabindex="-1"><a class="header-anchor" href="#_470-1-用-rand3-实现-rand5"><span>470-1. 用 Rand3() 实现 Rand5()</span></a></h3><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">rand5</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> <span class="token number">9</span>
        <span class="token keyword">while</span> res <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">:</span>
            res <span class="token operator">=</span> <span class="token punctuation">(</span>rand3<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> rand3<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 1 - 5</span>
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_470-2-用-rand5-实现-rand7" tabindex="-1"><a class="header-anchor" href="#_470-2-用-rand5-实现-rand7"><span>470-2. 用 Rand5() 实现 Rand7()</span></a></h3><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">rand7</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> <span class="token number">9</span>
        <span class="token keyword">while</span> res <span class="token operator">&gt;</span> <span class="token number">21</span><span class="token punctuation">:</span>
            res <span class="token operator">=</span> <span class="token punctuation">(</span>rand5<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> rand5<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 1 - 21</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>res <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">+</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_223-矩形面积" tabindex="-1"><a class="header-anchor" href="#_223-矩形面积"><span>223. 矩形面积</span></a></h3>`,13),B={href:"https://leetcode-cn.com/problems/rectangle-area/",title:"223. 矩形面积",target:"_blank",rel:"noopener noreferrer"},O=p(`<p>一、题目</p><p>在二维平面上计算出两个由直线构成的矩形重叠后形成的总面积。</p><p>每个矩形由其左下顶点和右上顶点坐标表示，如图所示。</p><p>二、解</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">computeArea</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> B<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> C<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> D<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> E<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> F<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> G<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> H<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        area1 <span class="token operator">=</span> <span class="token punctuation">(</span>C <span class="token operator">-</span> A<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>D <span class="token operator">-</span> B<span class="token punctuation">)</span>
        area2 <span class="token operator">=</span> <span class="token punctuation">(</span>G <span class="token operator">-</span> E<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>H <span class="token operator">-</span> F<span class="token punctuation">)</span>
        <span class="token keyword">if</span> E <span class="token operator">&gt;=</span> C <span class="token keyword">or</span> F <span class="token operator">&gt;=</span> D <span class="token keyword">or</span> A <span class="token operator">&gt;=</span> G <span class="token keyword">or</span> B <span class="token operator">&gt;=</span> H<span class="token punctuation">:</span>
            <span class="token keyword">return</span> area1 <span class="token operator">+</span> area2
        cross_area <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span> G<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">max</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> E<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>D<span class="token punctuation">,</span> H<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">max</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> F<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> area1 <span class="token operator">+</span> area2 <span class="token operator">-</span> cross_area
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_264-丑数-ii" tabindex="-1"><a class="header-anchor" href="#_264-丑数-ii"><span>264. 丑数 II</span></a></h3>`,7),T={href:"https://leetcode-cn.com/problems/ugly-number-ii/",title:"264. 丑数 II",target:"_blank",rel:"noopener noreferrer"},E=p(`<p>一、题目</p><p>编写一个程序，找出第 n 个丑数。</p><p>丑数就是质因数只包含 2, 3, 5 的正整数。</p><p>示例:</p><div class="language-纯文本 line-numbers-mode" data-ext="纯文本" data-title="纯文本"><pre class="language-纯文本"><code>输入: n = 10
输出: 12
解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二、解析</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">nthUglyNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        i2 <span class="token operator">=</span> i3 <span class="token operator">=</span> i5 <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span> <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>
            num2 <span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num5 <span class="token operator">=</span> num_list<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> num_list<span class="token punctuation">[</span>i3<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> num_list<span class="token punctuation">[</span>i5<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span>
            num <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num5<span class="token punctuation">)</span>
            <span class="token keyword">if</span> num <span class="token operator">==</span> num2<span class="token punctuation">:</span>
                i2 <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> num <span class="token operator">==</span> num3<span class="token punctuation">:</span>
                i3 <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> num <span class="token operator">==</span> num5<span class="token punctuation">:</span>
                i5 <span class="token operator">+=</span> <span class="token number">1</span>
            num_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>
        <span class="token keyword">return</span> num_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_191-二进制中1的个数" tabindex="-1"><a class="header-anchor" href="#_191-二进制中1的个数"><span>191. 二进制中1的个数</span></a></h3>`,9),F={href:"https://leetcode-cn.com/problems/number-of-1-bits/",title:"191. 位1的个数",target:"_blank",rel:"noopener noreferrer"},G=p(`<p>一、题目</p><p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 &#39;1&#39; 的个数（也被称为汉明重量）。</p><p>提示：</p><ul><li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li><li>在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在 示例 3 中，输入表示有符号整数 -3。</li></ul><p>示例 1：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：n = 00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 &#39;1&#39;。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：n = 00000000000000000000000010000000
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 &#39;1&#39;。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 3：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：n = 11111111111111111111111111111101
输出：31
解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 &#39;1&#39;。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二、解析</p><p>使用位运算。代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>class Solution<span class="token punctuation">:</span>
    def <span class="token function">hammingWeight</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        count <span class="token operator">=</span> <span class="token number">0</span>
        while n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> n <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
                count <span class="token operator">+=</span> <span class="token number">1</span>
            n <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> count
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_670-最大交换" tabindex="-1"><a class="header-anchor" href="#_670-最大交换"><span>670. 最大交换</span></a></h3>`,14),V={href:"https://leetcode.cn/problems/maximum-swap/",target:"_blank",rel:"noopener noreferrer"},H=p(`<p>一、题目</p><p>给定一个非负整数，你<strong>至多</strong>可以交换一次数字中的任意两位。返回你能得到的最大值。</p><p><strong>示例 1 :</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入: 2736
输出: 7236
解释: 交换数字2和数字7。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2 :</strong></p><div class="language-纯文本 line-numbers-mode" data-ext="纯文本" data-title="纯文本"><pre class="language-纯文本"><code>输入: 9973
输出: 9973
解释: 不需要交换。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong> 给定数字的范围是 [0, 108]</p><p>二、解析</p>`,8),J={href:"https://leetcode.cn/problems/maximum-swap/solutions/1818457/zui-da-jiao-huan-by-leetcode-solution-lnd5/",target:"_blank",rel:"noopener noreferrer"},K=p(`<p>1）直接遍历。</p><p>由于对于整数 num 的十进制数字位长最长为 8 位，任意两个数字交换一次最多有 28 种不同的交换方法，因此我们可以尝试遍历所有可能的数字交换方法即可，并找到交换后的最大数字即可。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">maximumSwap</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        ans <span class="token operator">=</span> num
        s <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
                s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token keyword">return</span> ans
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）贪心</p><p>可以观察到右边越大的数字与左边较小的数字进行交换，这样产生的整数才能保证越大。因此我们可以利用贪心法则，尝试将数字中右边较大的数字与左边较小的数字进行交换，这样即可保证得到的整数值最大。：</p><p>具体做法如下：</p><ul><li>我们将从右向左扫描数字数组，并记录当前已经扫描过的数字的最大值的索引maxId，且保证 maxId 越靠近数字的右侧。</li><li>如果检测到当前数字 charArray[i]&lt;charArray[maxId]，此时则说明索引 i 的右侧的数字最大值为charArray[maxId]，此时我们可以尝试将charArray[i] 与charArray[maxId] 进行交换即可得到一个比 num更大的值。</li></ul><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">maximumSwap</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        s <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
        maxIdx <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span>
        idx1 <span class="token operator">=</span> idx2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> s<span class="token punctuation">[</span>maxIdx<span class="token punctuation">]</span><span class="token punctuation">:</span>
                maxIdx <span class="token operator">=</span> i
            <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> s<span class="token punctuation">[</span>maxIdx<span class="token punctuation">]</span><span class="token punctuation">:</span>
                idx1<span class="token punctuation">,</span> idx2 <span class="token operator">=</span> i<span class="token punctuation">,</span> maxIdx
        <span class="token keyword">if</span> idx1 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> num
        s<span class="token punctuation">[</span>idx1<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>idx2<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>idx2<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>idx1<span class="token punctuation">]</span>
        <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1502-判断能否形成等差数列" tabindex="-1"><a class="header-anchor" href="#_1502-判断能否形成等差数列"><span>1502. 判断能否形成等差数列</span></a></h3>`,11),W={href:"https://leetcode.cn/problems/can-make-arithmetic-progression-from-sequence/",target:"_blank",rel:"noopener noreferrer"},U=p(`<p>一、题目</p><p>给你一个数字数组 arr 。</p><p>如果一个数列中，任意相邻两项的差总等于同一个常数，那么这个数列就称为 等差数列 。</p><p>如果可以重新排列数组形成等差数列，请返回 true ；否则，返回 false 。</p><p>示例 1：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：arr = [3,5,1]
输出：true
解释：对数组重新排序得到 [1,3,5] 或者 [5,3,1] ，任意相邻两项的差分别为 2 或 -2 ，可以形成等差数列。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：arr = [1,2,4]
输出：false
解释：无法通过重新排序得到等差数列。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二、解析</p><p>1）排序。</p><p>非常直观，代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">canMakeArithmeticProgression</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
        
        arr<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
        target <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析：时间复杂度为O(nlogn)。</p><p>2）数学方法，寻找等差数列的规律。如果是等差数列，假设最小值为a，公差为n，那么数列中为a+n，...，a+x*n。</p>`,14),Z={href:"https://leetcode.cn/problems/can-make-arithmetic-progression-from-sequence/solution/pan-duan-neng-fou-xing-cheng-deng-chai-shu-lie-by-/1252762",target:"_blank",rel:"noopener noreferrer"},Q=p(`<p>评论：1. 先遍历第一遍，得出最大值和最小值。 2. 如果最大值最小值相等，则肯定是等差数列。 3. 否则（最大值大于最小值）最大值和最小值的差记为diff。 3.1 如果diff不能被nums.length - 1整除，不是等差数列。 3.2 如果能整除，商x就是公差。 3.2.1 再遍历第二遍，看每个数减去最小值能不能被x整除，不能的话，不是等差数列。 3.2.2 能整除的话，商可以表示这个元素是等差数列的第几个元素。用一个临时数组（长度也是nums.length）标记一下这第几个元素是否出现过，如果出现过就有重复值，不是等差数列。 3.2.3 如果每个元素都是唯一的，则是等差数列。</p><p>代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">canMakeArithmeticProgression</span><span class="token punctuation">(</span>arr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span>
	<span class="token punctuation">}</span>

	minNum <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	maxNum <span class="token operator">:=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> num <span class="token operator">:=</span> <span class="token keyword">range</span> arr <span class="token punctuation">{</span>
		<span class="token keyword">if</span> num <span class="token operator">&lt;</span> minNum <span class="token punctuation">{</span>
			minNum <span class="token operator">=</span> num
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> num <span class="token operator">&gt;</span> maxNum <span class="token punctuation">{</span>
			maxNum <span class="token operator">=</span> num
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	maxMinDiff <span class="token operator">:=</span> maxNum <span class="token operator">-</span> minNum
	<span class="token keyword">if</span> maxMinDiff <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span>
	<span class="token punctuation">}</span>

	count <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
	<span class="token keyword">if</span> maxMinDiff<span class="token operator">%</span><span class="token punctuation">(</span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>

	step <span class="token operator">:=</span> maxMinDiff <span class="token operator">/</span> <span class="token punctuation">(</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
	flags <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> num <span class="token operator">:=</span> <span class="token keyword">range</span> arr <span class="token punctuation">{</span>
		temp <span class="token operator">:=</span> num <span class="token operator">-</span> minNum
		<span class="token keyword">if</span> temp<span class="token operator">%</span>step <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span>
		<span class="token punctuation">}</span>
		numIdx <span class="token operator">:=</span> temp <span class="token operator">/</span> step
		<span class="token keyword">if</span> flags<span class="token punctuation">[</span>numIdx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span>
		<span class="token punctuation">}</span>
		flags<span class="token punctuation">[</span>numIdx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_166-分数到小数" tabindex="-1"><a class="header-anchor" href="#_166-分数到小数"><span>166. 分数到小数</span></a></h3>`,4),X={href:"https://leetcode.cn/problems/fraction-to-recurring-decimal/",target:"_blank",rel:"noopener noreferrer"},Y=p(`<p>一、题目</p><p>给定两个整数，分别表示分数的分子 numerator 和分母 denominator，以 字符串形式返回小数 。</p><p>如果小数部分为循环小数，则将循环的部分括在括号内。</p><p>如果存在多个答案，只需返回 任意一个 。</p><p>对于所有给定的输入，保证答案字符串的长度小于 10^4 。</p><p>示例 1：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：numerator = 1, denominator = 2
输出：&quot;0.5&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：numerator = 2, denominator = 1
输出：&quot;2&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 3：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：numerator = 4, denominator = 333
输出：&quot;0.(012)&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>二、解析</p>`,12),$={href:"https://leetcode.cn/problems/fraction-to-recurring-decimal/solutions/1028368/fen-shu-dao-xiao-shu-by-leetcode-solutio-tqdw/",target:"_blank",rel:"noopener noreferrer"},nn=p(`<p>如果分子可以被分母整除，则结果是整数，将分子除以分母的商以字符串的形式返回即可。</p><p>如果分子不能被分母整除，则结果是有限小数或无限循环小数，需要通过模拟长除法的方式计算结果。为了方便处理，首先根据分子和分母的正负决定结果的正负（注意此时分子和分母都不为 0），然后将分子和分母都转成正数，再计算长除法。</p><p>计算长除法时，首先计算结果的整数部分，将以下部分依次拼接到结果中：</p><ul><li>如果结果是负数则将负号拼接到结果中，如果结果是正数则跳过这一步；</li><li>将整数部分拼接到结果中；</li><li>将小数点拼接到结果中。</li></ul><p>完成上述拼接之后，根据余数计算小数部分。</p><p>计算小数部分时，每次将余数乘以 10，然后计算小数的下一位数字，并得到新的余数。重复上述操作直到余数变成 0或者找到循环节。</p><ul><li>如果余数变成 0，则结果是有限小数，将小数部分拼接到结果中。</li><li>如果找到循环节，则找到循环节的开始位置和结束位置并加上括号，然后将小数部分拼接到结果中。</li></ul><p>如何判断是否找到循环节？注意到对于相同的余数，计算得到的小数的下一位数字一定是相同的，因此如果计算过程中发现某一位的余数在之前已经出现过，则为找到循环节。为了记录每个余数是否已经出现过，需要使用哈希表存储每个余数在小数部分第一次出现的下标。</p><p>Python代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">fractionToDecimal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numerator<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> denominator<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> numerator <span class="token operator">%</span> denominator <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>numerator <span class="token operator">//</span> denominator<span class="token punctuation">)</span>

        s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>numerator <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>denominator <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            s<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>

        <span class="token comment"># 整数部分</span>
        numerator <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>numerator<span class="token punctuation">)</span>
        denominator <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>denominator<span class="token punctuation">)</span>
        integerPart <span class="token operator">=</span> numerator <span class="token operator">//</span> denominator
        s<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>integerPart<span class="token punctuation">)</span><span class="token punctuation">)</span>
        s<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>

        <span class="token comment"># 小数部分</span>
        indexMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        remainder <span class="token operator">=</span> numerator <span class="token operator">%</span> denominator
        <span class="token keyword">while</span> remainder <span class="token keyword">and</span> remainder <span class="token keyword">not</span> <span class="token keyword">in</span> indexMap<span class="token punctuation">:</span>
            indexMap<span class="token punctuation">[</span>remainder<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
            remainder <span class="token operator">*=</span> <span class="token number">10</span>
            s<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>remainder <span class="token operator">//</span> denominator<span class="token punctuation">)</span><span class="token punctuation">)</span>
            remainder <span class="token operator">%=</span> denominator
        <span class="token keyword">if</span> remainder <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 有循环节</span>
            insertIndex <span class="token operator">=</span> indexMap<span class="token punctuation">[</span>remainder<span class="token punctuation">]</span>
            s<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>insertIndex<span class="token punctuation">,</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span>
            s<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Golang代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">fractionToDecimal</span><span class="token punctuation">(</span>numerator<span class="token punctuation">,</span> denominator <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> numerator<span class="token operator">%</span>denominator <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>numerator <span class="token operator">/</span> denominator<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span> numerator <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>denominator <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 整数部分</span>
    numerator <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>numerator<span class="token punctuation">)</span>
    denominator <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>denominator<span class="token punctuation">)</span>
    integerPart <span class="token operator">:=</span> numerator <span class="token operator">/</span> denominator
    s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>integerPart<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>
    s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span>

    <span class="token comment">// 小数部分</span>
    indexMap <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    remainder <span class="token operator">:=</span> numerator <span class="token operator">%</span> denominator
    <span class="token keyword">for</span> remainder <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> indexMap<span class="token punctuation">[</span>remainder<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        indexMap<span class="token punctuation">[</span>remainder<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
        remainder <span class="token operator">*=</span> <span class="token number">10</span>
        s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token char">&#39;0&#39;</span><span class="token operator">+</span><span class="token function">byte</span><span class="token punctuation">(</span>remainder<span class="token operator">/</span>denominator<span class="token punctuation">)</span><span class="token punctuation">)</span>
        remainder <span class="token operator">%=</span> denominator
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> remainder <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span> <span class="token comment">// 有循环节</span>
        insertIndex <span class="token operator">:=</span> indexMap<span class="token punctuation">[</span>remainder<span class="token punctuation">]</span>
        s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span>insertIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token char">&#39;(&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>insertIndex<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>
        s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token char">&#39;)&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">abs</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span>x
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> x
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_150-逆波兰表达式求值" tabindex="-1"><a class="header-anchor" href="#_150-逆波兰表达式求值"><span>150. 逆波兰表达式求值</span></a></h3>`,13),sn={href:"https://leetcode.cn/problems/evaluate-reverse-polish-notation/",target:"_blank",rel:"noopener noreferrer"},an=n("p",null,"一、题目",-1),tn={href:"https://leetcode.cn/problems/evaluate-reverse-polish-notation/",title:"https://leetcode.cn/problems/evaluate-reverse-polish-notation/",target:"_blank",rel:"noopener noreferrer"},pn=p(`<p>给你一个字符串数组 tokens ，表示一个根据 逆波兰表示法 表示的算术表达式。</p><p>请你计算该表达式。返回一个表示表达式值的整数。</p><p>注意：</p><p>有效的算符为 &#39;+&#39;、&#39;-&#39;、&#39; *&#39; 和 &#39;/&#39; 。 每个操作数（运算对象）都可以是一个整数或者另一个表达式。 两个整数之间的除法总是 向零截断 。 表达式中不含除零运算。 输入是一个根据逆波兰表示法表示的算术表达式。 答案及所有中间计算结果可以用 32 位 整数表示。</p><p>示例 1：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：tokens = [&quot;2&quot;,&quot;1&quot;,&quot;+&quot;,&quot;3&quot;,&quot;*&quot;]
输出：9
解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2：</p><div class="language-纯文本 line-numbers-mode" data-ext="纯文本" data-title="纯文本"><pre class="language-纯文本"><code>输入：tokens = [&quot;4&quot;,&quot;13&quot;,&quot;5&quot;,&quot;/&quot;,&quot;+&quot;]
输出：6
解释：该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 3：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：tokens = [&quot;10&quot;,&quot;6&quot;,&quot;9&quot;,&quot;3&quot;,&quot;+&quot;,&quot;-11&quot;,&quot;*&quot;,&quot;/&quot;,&quot;*&quot;,&quot;17&quot;,&quot;+&quot;,&quot;5&quot;,&quot;+&quot;]
输出：22
解释：该算式转化为常见的中缀算术表达式为：
  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二、解析</p><p>使用栈。</p><p>代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">evalRPN</span><span class="token punctuation">(</span>tokens <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    stack <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> token <span class="token operator">:=</span> <span class="token keyword">range</span> tokens <span class="token punctuation">{</span>
        val<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            stack <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            num1<span class="token punctuation">,</span> num2 <span class="token operator">:=</span> stack<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stack<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
            stack <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>
            <span class="token keyword">switch</span> token <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token string">&quot;+&quot;</span><span class="token punctuation">:</span>
                stack <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> num1<span class="token operator">+</span>num2<span class="token punctuation">)</span>
            <span class="token keyword">case</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">:</span>
                stack <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> num1<span class="token operator">-</span>num2<span class="token punctuation">)</span>
            <span class="token keyword">case</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">:</span>
                stack <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> num1<span class="token operator">*</span>num2<span class="token punctuation">)</span>
            <span class="token keyword">default</span><span class="token punctuation">:</span>
                stack <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> num1<span class="token operator">/</span>num2<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_224-基本计算器" tabindex="-1"><a class="header-anchor" href="#_224-基本计算器"><span>224. 基本计算器</span></a></h3>`,15),en={href:"https://leetcode-cn.com/problems/basic-calculator/",title:"224. 基本计算器",target:"_blank",rel:"noopener noreferrer"},on=p('<p>一、题目</p><p>实现一个基本的计算器来计算一个简单的字符串表达式的值。 字符串表达式可以包含左括号<code>(</code>，右括号<code>)</code>，加号<code>+</code>，减号<code>-</code>，非负整数和空格<code></code>。</p><p>二、解析</p><p><mark>TODO</mark></p><h3 id="_227-基本计算器ii" tabindex="-1"><a class="header-anchor" href="#_227-基本计算器ii"><span>227. 基本计算器II</span></a></h3>',5),cn={href:"https://leetcode.cn/problems/basic-calculator-ii/",target:"_blank",rel:"noopener noreferrer"},ln=n("h3",{id:"_282-为运算表达式设计优先级",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_282-为运算表达式设计优先级"},[n("span",null,"282. 为运算表达式设计优先级")])],-1),un={href:"https://leetcode.cn/problems/expression-add-operators/",target:"_blank",rel:"noopener noreferrer"},rn=p(`<p>一、题目</p><p>给你一个由数字和运算符组成的字符串 expression ，按不同优先级组合数字和运算符，计算并返回所有可能组合的结果。你可以 按任意顺序 返回答案。</p><p>生成的测试用例满足其对应输出值符合 32 位整数范围，不同结果的数量不超过 104 。</p><p>示例 1：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：expression = &quot;2-1-1&quot;
输出：[0,2]
解释：
((2-1)-1) = 0 
(2-(1-1)) = 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：expression = &quot;23-45&quot;
输出：[-34,-14,-10,-10,10]
解释：
(2*(3-(45))) = -34
((23)-(45)) = -14
((2(3-4))5) = -10
(2((3-4)5)) = -10
(((23)-4)*5) = 10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提示：</p><ul><li>1 &lt;= expression.length &lt;= 20</li><li>expression 由数字和算符 &#39;+&#39;、&#39;-&#39; 和 &#39; *&#39; 组成。</li><li>输入表达式中的所有整数值在范围 [0, 99] </li></ul><p>二、解析</p><p>递归搜索。</p><p>代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> addition<span class="token punctuation">,</span> subtraction<span class="token punctuation">,</span> multiplication <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span>

<span class="token keyword">func</span> <span class="token function">diffWaysToCompute</span><span class="token punctuation">(</span>expression <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	ops <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> n <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> unicode<span class="token punctuation">.</span><span class="token function">IsDigit</span><span class="token punctuation">(</span><span class="token function">rune</span><span class="token punctuation">(</span>expression<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			x <span class="token operator">:=</span> <span class="token number">0</span>
			<span class="token keyword">for</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> unicode<span class="token punctuation">.</span><span class="token function">IsDigit</span><span class="token punctuation">(</span><span class="token function">rune</span><span class="token punctuation">(</span>expression<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
				x <span class="token operator">=</span> x<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token function">int</span><span class="token punctuation">(</span>expression<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			ops <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ops<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> expression<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;+&#39;</span> <span class="token punctuation">{</span>
				ops <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ops<span class="token punctuation">,</span> addition<span class="token punctuation">)</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> expression<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;-&#39;</span> <span class="token punctuation">{</span>
				ops <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ops<span class="token punctuation">,</span> subtraction<span class="token punctuation">)</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				ops <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ops<span class="token punctuation">,</span> multiplication<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			i<span class="token operator">++</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>ops<span class="token punctuation">)</span>
	dp <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> dp <span class="token punctuation">{</span>
		dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>ops<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">dfs</span><span class="token punctuation">(</span>ops <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> r <span class="token builtin">int</span><span class="token punctuation">,</span> dp <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	res <span class="token operator">:=</span> dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span>
	<span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> res
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> l <span class="token operator">==</span> r <span class="token punctuation">{</span>
		dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>ops<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">}</span>
		<span class="token keyword">return</span> dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span> <span class="token punctuation">{</span>
		left <span class="token operator">:=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>ops<span class="token punctuation">,</span> l<span class="token punctuation">,</span> i<span class="token punctuation">,</span> dp<span class="token punctuation">)</span>
		right <span class="token operator">:=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>ops<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> dp<span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> x <span class="token operator">:=</span> <span class="token keyword">range</span> left <span class="token punctuation">{</span>
			<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> y <span class="token operator">:=</span> <span class="token keyword">range</span> right <span class="token punctuation">{</span>
				<span class="token keyword">if</span> ops<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> addition <span class="token punctuation">{</span>
					dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token operator">+</span>y<span class="token punctuation">)</span>
				<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> ops<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> subtraction <span class="token punctuation">{</span>
					dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token operator">-</span>y<span class="token punctuation">)</span>
				<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
					dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token operator">*</span>y<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> dp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_282-给表达式添加运算符" tabindex="-1"><a class="header-anchor" href="#_282-给表达式添加运算符"><span>282. 给表达式添加运算符</span></a></h3>`,14),kn={href:"https://leetcode.cn/problems/expression-add-operators/",target:"_blank",rel:"noopener noreferrer"},dn=p(`<p>一、题目</p><p>给定一个仅包含数字 0-9 的字符串 num 和一个目标值整数 target ，在 num 的数字之间添加 二元 运算符（不是一元）+、- 或 * ，返回 所有 能够得到 target 的表达式。</p><p>注意，返回表达式中的操作数 不应该 包含前导零。</p><p>示例 1:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入: num = &quot;123&quot;, target = 6
输出: [&quot;1+2+3&quot;, &quot;123&quot;]
解释: “123” 和 “1+2+3” 的值都是6。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入: num = &quot;232&quot;, target = 8
输出: [&quot;23+2&quot;, &quot;2+32&quot;]
解释: “23+2” 和 “2+32” 的值都是8。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 3:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入: num = &quot;3456237490&quot;, target = 9191
输出: []
解释: 表达式 “3456237490” 无法得到 9191 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二、解析</p><p>TODO</p>`,11);function vn(mn,bn){const a=o("ExternalLinkIcon");return c(),l("div",null,[i(" more "),r,k,n("blockquote",null,[n("p",null,[n("a",d,[s("剑指 Offer 62. 圆圈中最后剩下的数字"),t(a)])])]),v,m,b,h,n("blockquote",null,[n("p",null,[s("参考 "),n("a",g,[s("LeetCode-Solution"),t(a)])]),n("p",null,[s("参考 "),n("a",f,[s("约瑟夫环——公式法（递推公式）"),t(a)])])]),y,n("blockquote",null,[n("p",null,[n("a",x,[s("172. 阶乘后的零"),t(a)])])]),_,n("blockquote",null,[n("p",null,[n("a",w,[s("233. 数字 1 的个数"),t(a)])])]),q,n("blockquote",null,[n("p",null,[s("参考 "),n("a",I,[s("Leetcode官方题解"),t(a)])])]),S,n("blockquote",null,[n("p",null,[n("a",D,[s("面试题 08.04. 幂集"),t(a)])])]),N,n("blockquote",null,[n("p",null,[n("a",M,[s("343. 整数拆分"),t(a)])])]),L,R,j,n("blockquote",null,[n("p",null,[s("参考 "),n("a",z,[s("Leetcode-Krahets"),t(a)])])]),A,n("blockquote",null,[n("p",null,[n("a",C,[s("470. 用 Rand7() 实现 Rand10()"),t(a)])])]),P,n("blockquote",null,[n("p",null,[n("a",B,[s("223. 矩形面积"),t(a)])])]),O,n("blockquote",null,[n("p",null,[n("a",T,[s("264. 丑数 II"),t(a)])])]),E,n("blockquote",null,[n("p",null,[n("a",F,[s("191. 位1的个数"),t(a)])])]),G,n("blockquote",null,[n("p",null,[n("a",V,[s("670. 最大交换"),t(a)])])]),H,n("blockquote",null,[n("p",null,[n("a",J,[s("官方题解"),t(a)])])]),K,n("blockquote",null,[n("p",null,[n("a",W,[s("1502. 判断能否形成等差数列"),t(a)])])]),U,n("blockquote",null,[n("p",null,[n("a",Z,[s("官方题解-评论"),t(a)])])]),Q,n("blockquote",null,[n("p",null,[n("a",X,[s("166. 分数到小数"),t(a)])])]),Y,n("blockquote",null,[n("p",null,[n("a",$,[s("官方题解"),t(a)])])]),nn,n("blockquote",null,[n("p",null,[n("a",sn,[s("150. 逆波兰表达式求值"),t(a)])])]),an,n("blockquote",null,[n("p",null,[n("a",tn,[s("https://leetcode.cn/problems/evaluate-reverse-polish-notation/"),t(a)])])]),pn,n("blockquote",null,[n("p",null,[n("a",en,[s("224. 基本计算器"),t(a)])])]),on,n("blockquote",null,[n("p",null,[n("a",cn,[s("227. 基本计算器 II"),t(a)])])]),ln,n("blockquote",null,[n("p",null,[n("a",un,[s("282. 给表达式添加运算符"),t(a)])])]),rn,n("blockquote",null,[n("p",null,[n("a",kn,[s("282. 给表达式添加运算符"),t(a)])])]),dn])}const fn=e(u,[["render",vn],["__file","math.html.vue"]]);export{fn as default};
