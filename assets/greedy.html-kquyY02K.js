import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as l,c as i,d as c,a as n,e as s,b as e,f as t}from"./app-qKT_MvSj.js";const r={},u=n("h2",{id:"leetcode-编程题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#leetcode-编程题"},[n("span",null,"Leetcode 编程题")])],-1),d=n("h3",{id:"_55-跳跃游戏",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_55-跳跃游戏"},[n("span",null,"55. 跳跃游戏")])],-1),k={href:"https://leetcode-cn.com/problems/jump-game/",title:"55. 跳跃游戏",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,"一、题目",-1),v=n("p",null,"给定一个非负整数数组，你最初位于数组的第一个位置。",-1),b=n("p",null,"数组中的每个元素代表你在该位置可以跳跃的最大长度。",-1),h=n("p",null,"判断你是否能够到达最后一个位置。",-1),g=n("p",null,"二、解析",-1),y={href:"https://leetcode-cn.com/problems/jump-game/solution/tiao-yue-you-xi-by-leetcode-solution/",title:"Leetcode官方题解",target:"_blank",rel:"noopener noreferrer"},_=t(`<p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">canJump</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        rightmost <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> i <span class="token operator">&lt;=</span> rightmost<span class="token punctuation">:</span>
                rightmost <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>rightmost<span class="token punctuation">,</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> rightmost <span class="token operator">&gt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>
                    <span class="token keyword">return</span> <span class="token boolean">True</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_45-跳跃游戏-ii" tabindex="-1"><a class="header-anchor" href="#_45-跳跃游戏-ii"><span>45. 跳跃游戏 II</span></a></h3>`,3),f={href:"https://leetcode-cn.com/problems/jump-game-ii/",title:"45. 跳跃游戏 II",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,"一、题目",-1),w=n("p",null,"给定一个非负整数数组，你最初位于数组的第一个位置。",-1),L=n("p",null,"数组中的每个元素代表你在该位置可以跳跃的最大长度。",-1),j=n("p",null,"你的目标是使用最少的跳跃次数到达数组的最后一个位置。",-1),q=n("p",null,"说明: 假设你总是可以到达数组的最后一个位置。",-1),I=n("p",null,"二、解析",-1),O={href:"https://leetcode-cn.com/problems/jump-game-ii/solution/tiao-yue-you-xi-ii-by-leetcode-solution/",title:"Leetcode官方题解",target:"_blank",rel:"noopener noreferrer"},S=n("p",null,[s("1）反向查找出发位置，时间复杂度"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("msup",null,[n("mi",null,"n"),n("mn",null,"2")]),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])]),n("span",{class:"mclose"},")")])])]),s("。")],-1),Y=t(`<p>Python 实现会超时，所以给出了 Java 实现。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">jump</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> position <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> steps <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>position <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> position<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    position <span class="token operator">=</span> i<span class="token punctuation">;</span>
                    steps<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> steps<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),M=n("p",null,[s("2）正向查找可到达的最大位置，时间复杂度"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s("。")],-1),N=t(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">jump</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        max_pos <span class="token operator">=</span> <span class="token number">0</span>
        cur_end <span class="token operator">=</span> <span class="token number">0</span>
        steps <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> max_pos <span class="token operator">&gt;=</span> i<span class="token punctuation">:</span>
                max_pos <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>max_pos<span class="token punctuation">,</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> i <span class="token operator">==</span> cur_end<span class="token punctuation">:</span>
                    cur_end <span class="token operator">=</span> max_pos
                    steps <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> steps
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_991-坏了的计算器" tabindex="-1"><a class="header-anchor" href="#_991-坏了的计算器"><span>991. 坏了的计算器</span></a></h3>`,2),V={href:"https://leetcode-cn.com/problems/broken-calculator/",title:"991. 坏了的计算器",target:"_blank",rel:"noopener noreferrer"},X=t(`<p>一、题目</p><p>在显示着数字的坏计算器上，我们可以执行以下两种操作：</p><ul><li>双倍（Double）：将显示屏上的数字乘 2；</li><li>递减（Decrement）：将显示屏上的数字减 1 。</li></ul><p>最初，计算器显示数字 X。 返回显示数字 Y 所需的最小操作数。</p><p>二、解析</p><p>逆向思维。从大的数字到小的数字比较简单，偶数就除以2，奇数就加1。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">brokenCalc</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">:</span> <span class="token string">&#39;int&#39;</span><span class="token punctuation">,</span> Y<span class="token punctuation">:</span> <span class="token string">&#39;int&#39;</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;int&#39;</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> Y <span class="token operator">&gt;</span> X<span class="token punctuation">:</span>
            res <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> Y <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
                Y <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                Y <span class="token operator">//=</span> <span class="token number">2</span>

        <span class="token keyword">return</span> res <span class="token operator">+</span> X <span class="token operator">-</span> Y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_452-用最少数量的箭引爆气球" tabindex="-1"><a class="header-anchor" href="#_452-用最少数量的箭引爆气球"><span>452. 用最少数量的箭引爆气球</span></a></h3>`,9),z={href:"https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/",target:"_blank",rel:"noopener noreferrer"},B=t(`<p>一、题目</p><p>有一些球形气球贴在一堵用 XY 平面表示的墙面上。墙面上的气球记录在整数数组 points ，其中points[i] = [xstart, xend] 表示水平直径在 xstart 和 xend之间的气球。你不知道气球的确切 y 坐标。</p><p>一支弓箭可以沿着 x 轴从不同点 完全垂直 地射出。在坐标 x 处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend， 且满足  xstart ≤ x ≤ xend，则该气球会被 引爆 。可以射出的弓箭的数量 没有限制 。 弓箭一旦被射出之后，可以无限地前进。</p><p>给你一个数组 points ，返回引爆所有气球所必须射出的 最小 弓箭数 。</p><p>示例1：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：points = [[10,16],[2,8],[1,6],[7,12]]
输出：2
解释：气球可以用2支箭来爆破:
-在x = 6处射出箭，击破气球[2,8]和[1,6]。
-在x = 11处发射箭，击破气球[10,16]和[7,12]。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：points = [[1,2],[3,4],[5,6],[7,8]]
输出：4
解释：每个气球需要射出一支箭，总共需要4支箭。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二、解析</p>`,9),C={href:"https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/solutions/494515/yong-zui-shao-shu-liang-de-jian-yin-bao-qi-qiu-1-2/",target:"_blank",rel:"noopener noreferrer"},D=t(`<p>排序加贪心。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">findMinArrowShots</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> points<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> points<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        
        points<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> balloon<span class="token punctuation">:</span> balloon<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        pos <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        ans <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">for</span> balloon <span class="token keyword">in</span> points<span class="token punctuation">:</span>
            <span class="token keyword">if</span> balloon<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> pos<span class="token punctuation">:</span>
                pos <span class="token operator">=</span> balloon<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
                ans <span class="token operator">+=</span> <span class="token number">1</span>
        
        <span class="token keyword">return</span> ans

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_135-分发糖果" tabindex="-1"><a class="header-anchor" href="#_135-分发糖果"><span>135. 分发糖果</span></a></h3>`,4),E={href:"https://leetcode.cn/problems/candy/",target:"_blank",rel:"noopener noreferrer"},T=t(`<p>一、题目</p><p>n 个孩子站成一排。给你一个整数数组 ratings 表示每个孩子的评分。</p><p>你需要按照以下要求，给这些孩子分发糖果：</p><ul><li>每个孩子至少分配到 1 个糖果。</li><li>相邻两个孩子评分更高的孩子会获得更多的糖果。</li></ul><p>请你给每个孩子分发糖果，计算并返回需要准备的 最少糖果数目 。</p><p>示例 1：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：ratings = [1,0,2]
输出：5
解释：你可以分别给第一个、第二个、第三个孩子分发 2、1、2 颗糖果。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：ratings = [1,2,2]
输出：4
解释：你可以分别给第一个、第二个、第三个孩子分发 1、2、1 颗糖果。
  第三个孩子只得到 1 颗糖果，这满足题面中的两个条件。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提示：</p><ul><li>n == ratings.length</li><li>1 &lt;= n &lt;= 2 * 104</li><li>0 &lt;= ratings[i] &lt;= 2 * 104</li></ul><p>二、解析</p>`,12),J={href:"https://leetcode.cn/problems/candy/solution/fen-fa-tang-guo-by-leetcode-solution-f01p/",title:"https://leetcode.cn/problems/candy/solution/fen-fa-tang-guo-by-leetcode-solution-f01p/",target:"_blank",rel:"noopener noreferrer"},A=t(`<p>1）方法一，两次遍历。</p><p>我们可以将「相邻的孩子中，评分高的孩子必须获得更多的糖果」这句话拆分为两个规则，分别处理。</p><p>左规则：当 ratings[i−1]&lt;ratings[i] 时，i 号学生的糖果数量将比 i−1 号孩子的糖果数量多。</p><p>右规则：当 ratings[i]&gt;ratings[i+1] 时，i 号学生的糖果数量将比 i+1 号孩子的糖果数量多。</p><p>我们遍历该数组两次，处理出每一个学生分别满足左规则或右规则时，最少需要被分得的糖果数量。每个人最终分得的糖果数量即为这两个数量的最大值。</p><p>具体地，以左规则为例：我们从左到右遍历该数组，假设当前遍历到位置 i，如果有 ratings[i−1]&lt;ratings[i] 那么 i 号学生的糖果数量将比 i−1 号孩子的糖果数量多，我们令 left[i]=left[i−1]+1 即可，否则我们令 left[i]=1。</p><p>在实际代码中，我们先计算出左规则 left 数组，在计算右规则的时候只需要用单个变量记录当前位置的右规则，同时计算答案即可。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">candy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ratings<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ratings<span class="token punctuation">)</span>
        left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> ratings<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> ratings<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
        
        right <span class="token operator">=</span> ret <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">and</span> ratings<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> ratings<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                right <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                right <span class="token operator">=</span> <span class="token number">1</span>
            ret <span class="token operator">+=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>
        
        <span class="token keyword">return</span> ret

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）方法二，常数空间遍历。</p><p>TODO。</p>`,11);function F(P,G){const a=o("ExternalLinkIcon");return l(),i("div",null,[c(" more "),u,d,n("blockquote",null,[n("p",null,[n("a",k,[s("55. 跳跃游戏"),e(a)])])]),m,v,b,h,g,n("blockquote",null,[n("p",null,[s("参考 "),n("a",y,[s("Leetcode官方题解"),e(a)])])]),_,n("blockquote",null,[n("p",null,[n("a",f,[s("45. 跳跃游戏 II"),e(a)])])]),x,w,L,j,q,I,n("blockquote",null,[n("p",null,[s("参考 "),n("a",O,[s("Leetcode官方题解"),e(a)])])]),S,Y,M,N,n("blockquote",null,[n("p",null,[n("a",V,[s("991. 坏了的计算器"),e(a)])])]),X,n("blockquote",null,[n("p",null,[n("a",z,[s("452. 用最少数量的箭引爆气球"),e(a)])])]),B,n("blockquote",null,[n("p",null,[n("a",C,[s("官方题解"),e(a)])])]),D,n("blockquote",null,[n("p",null,[n("a",E,[s("135. 分发糖果"),e(a)])])]),T,n("blockquote",null,[n("p",null,[n("a",J,[s("https://leetcode.cn/problems/candy/solution/fen-fa-tang-guo-by-leetcode-solution-f01p/"),e(a)])])]),A])}const Q=p(r,[["render",F],["__file","greedy.html.vue"]]);export{Q as default};
