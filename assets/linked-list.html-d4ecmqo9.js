import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o,c,d as i,a as n,e as s,b as t,f as a}from"./app-qKT_MvSj.js";const u={},r=a(`<h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h2><p>链表是一种动态数据结构，由指针把若干个结点连接成链状结构。</p><p>在创建链表时，无须知道链表的长度。当插入一个结点时，只需要为新结点分配内存，并调整指针的指向来确保新结点被链接到链表当中。链表的内存不是在创建链表时一次性分配的，而是每添加一个结点分配一次内存，所以链表的空间效率比数组高。</p><p>但是，由于链表的内存不是连续的。如果想访问链表的结点，只能从头结点开始遍历链表，因此链表的访问时间效率低。</p><p>常见的链表有单链表，双链表。单链表中的结点有指向下一个结点的指针，而双链表既有指向上一个结点的指针，也有指向下一个结点的指针。如果一个链表的头尾结点相连，形成了一个环路，这种链表可以称为循环链表。</p><h3 id="单链表结点" tabindex="-1"><a class="header-anchor" href="#单链表结点"><span>单链表结点</span></a></h3><p>Python：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># Definition for singly-linked list.</span>
<span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Golang：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Definition for singly-linked list.</span>
<span class="token keyword">type</span> ListNode strcut <span class="token punctuation">{</span>
	Val  <span class="token builtin">int</span>
	Next <span class="token operator">*</span>ListNode
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="双链表结点" tabindex="-1"><a class="header-anchor" href="#双链表结点"><span>双链表结点</span></a></h3><p>Python：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">## Definition for double-linked list.</span>
<span class="token keyword">class</span> <span class="token class-name">DoubleListNode</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> pre<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val
        self<span class="token punctuation">.</span>pre <span class="token operator">=</span> pre
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Golang：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Definition for double-linked list.</span>
<span class="token keyword">type</span> DoubleListNode strcut <span class="token punctuation">{</span>
    Val  <span class="token builtin">int</span>
    Pre  <span class="token operator">*</span>DoubleListNode
    Next <span class="token operator">*</span>DoubleListNode
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> pre<span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> pre<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pre <span class="token operator">=</span> pre<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="leetcode-编程题" tabindex="-1"><a class="header-anchor" href="#leetcode-编程题"><span>Leetcode 编程题</span></a></h2><h3 id="_206-反转链表" tabindex="-1"><a class="header-anchor" href="#_206-反转链表"><span>206. 反转链表</span></a></h3>`,21),d={href:"https://leetcode-cn.com/problems/reverse-linked-list/",title:"206. 反转链表",target:"_blank",rel:"noopener noreferrer"},k=a(`<p>一、题目</p><p>反转一个单链表。</p><p>二、解析</p><p>1）普通</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> head <span class="token keyword">or</span> <span class="token keyword">not</span> head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> head
        
        pre <span class="token operator">=</span> <span class="token boolean">None</span>
        cur <span class="token operator">=</span> head
        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>
            nxt <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre
            pre <span class="token operator">=</span> cur
            cur <span class="token operator">=</span> nxt
        
        <span class="token keyword">return</span> pre
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）插入法</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> head <span class="token keyword">or</span> <span class="token keyword">not</span> head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> head

        dummy <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        dummy<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head
        cur <span class="token operator">=</span> head
        <span class="token keyword">while</span> cur <span class="token keyword">and</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
            nxt <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> nxt<span class="token punctuation">.</span><span class="token builtin">next</span>
            nxt<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> dummy<span class="token punctuation">.</span><span class="token builtin">next</span>
            dummy<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> nxt

        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span><span class="token builtin">next</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）递归</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> head <span class="token keyword">or</span> <span class="token keyword">not</span> head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> head
        res <span class="token operator">=</span> self<span class="token punctuation">.</span>reverseList<span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>
        head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head
        head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_92-反转链表-ii" tabindex="-1"><a class="header-anchor" href="#_92-反转链表-ii"><span>92. 反转链表 II</span></a></h3>`,10),m={href:"https://leetcode-cn.com/problems/reverse-linked-list-ii/comments/",title:"92. 反转链表 II",target:"_blank",rel:"noopener noreferrer"},v=a(`<p>一、题目</p><p>反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。</p><p>说明: 1 ≤ m ≤ n ≤ 链表长度。</p><p>二、解析</p><p>找到第 m - 1 个结点，使用插入法。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> head <span class="token keyword">or</span> m <span class="token operator">==</span> n<span class="token punctuation">:</span>
            <span class="token keyword">return</span> head
        
        dummy <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        dummy<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head
        
        pre <span class="token operator">=</span> dummy
        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            pre <span class="token operator">=</span> pre<span class="token punctuation">.</span><span class="token builtin">next</span>
        
        cur <span class="token operator">=</span> pre<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">-</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>
            nxt <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> nxt<span class="token punctuation">.</span><span class="token builtin">next</span>
            nxt<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre<span class="token punctuation">.</span><span class="token builtin">next</span>
            pre<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> nxt
        
        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span><span class="token builtin">next</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_24-两两交换链表中的节点" tabindex="-1"><a class="header-anchor" href="#_24-两两交换链表中的节点"><span>24. 两两交换链表中的节点</span></a></h3>`,8),b={href:"https://leetcode-cn.com/problems/swap-nodes-in-pairs/",title:"24. 两两交换链表中的节点",target:"_blank",rel:"noopener noreferrer"},h=a(`<p>一、题目</p><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。 你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><p>二、解析</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        dummy <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        dummy<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head
        
        pre <span class="token operator">=</span> dummy
        cur <span class="token operator">=</span> head
        <span class="token keyword">while</span> cur <span class="token keyword">and</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
            pre<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>
            pre<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur
            pre <span class="token operator">=</span> cur
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
                
        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span><span class="token builtin">next</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_25-k-个一组翻转链表" tabindex="-1"><a class="header-anchor" href="#_25-k-个一组翻转链表"><span>25. K 个一组翻转链表</span></a></h3>`,6),y={href:"https://leetcode-cn.com/problems/reverse-nodes-in-k-group/",title:"25. K 个一组翻转链表",target:"_blank",rel:"noopener noreferrer"},g=a(`<p>一、题目</p><p>给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。</p><p>k 是一个正整数，它的值小于或等于链表的长度。</p><p>如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><p>二、解析</p><p>使用插入法。代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        dummy <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        dummy<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head
        
        pre <span class="token operator">=</span> dummy
        cur <span class="token operator">=</span> head
        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>
            end <span class="token operator">=</span> cur
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                end <span class="token operator">=</span> end<span class="token punctuation">.</span><span class="token builtin">next</span>
                <span class="token keyword">if</span> <span class="token keyword">not</span> end<span class="token punctuation">:</span>
                    <span class="token keyword">return</span> dummy<span class="token punctuation">.</span><span class="token builtin">next</span>
            end <span class="token operator">=</span> end<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">while</span> cur <span class="token keyword">and</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">!=</span> end<span class="token punctuation">:</span>
                nxt <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
                cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> nxt<span class="token punctuation">.</span><span class="token builtin">next</span>
                nxt<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre<span class="token punctuation">.</span><span class="token builtin">next</span>
                pre<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> nxt
            pre <span class="token operator">=</span> cur
            cur <span class="token operator">=</span> end
        
        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span><span class="token builtin">next</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_234-链表回文" tabindex="-1"><a class="header-anchor" href="#_234-链表回文"><span>234. 链表回文</span></a></h3>`,8),w={href:"https://leetcode-cn.com/problems/palindrome-linked-list/",title:"234. 回文链表",target:"_blank",rel:"noopener noreferrer"},x=a(`<p>一、题目</p><p>请判断一个链表是否为回文链表。</p><p>二、解析</p><p>快慢指针，并对前半部分进行翻转。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        fast <span class="token operator">=</span> slow <span class="token operator">=</span> head
        pre <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token keyword">while</span> fast <span class="token keyword">and</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>
            nxt <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>
            slow<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre
            pre <span class="token operator">=</span> slow
            slow <span class="token operator">=</span> nxt
        
        <span class="token keyword">if</span> fast<span class="token punctuation">:</span>
            left<span class="token punctuation">,</span> right <span class="token operator">=</span> pre<span class="token punctuation">,</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>    
            left<span class="token punctuation">,</span> right <span class="token operator">=</span> pre<span class="token punctuation">,</span> slow
        <span class="token keyword">while</span> left <span class="token keyword">and</span> right <span class="token keyword">and</span> left<span class="token punctuation">.</span>val <span class="token operator">==</span> right<span class="token punctuation">.</span>val<span class="token punctuation">:</span>
            left <span class="token operator">=</span> left<span class="token punctuation">.</span><span class="token builtin">next</span>
            right <span class="token operator">=</span> right<span class="token punctuation">.</span><span class="token builtin">next</span>
        
        <span class="token keyword">return</span> <span class="token keyword">not</span> left <span class="token keyword">and</span> <span class="token keyword">not</span> right
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_143-重排链表" tabindex="-1"><a class="header-anchor" href="#_143-重排链表"><span>143. 重排链表</span></a></h3>`,6),f={href:"https://leetcode-cn.com/problems/reorder-list/",title:"143. 重排链表",target:"_blank",rel:"noopener noreferrer"},_=a(`<p>一、题目</p><p>给定一个单链表 L：L0→L1→…→Ln-1→Ln ，</p><p>将其重新排列后变为： L0→Ln→L1→Ln-1→L2→Ln-2→…</p><p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><p>二、解析</p><p>使用快慢指针，对右边的一半进行翻转。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reorderList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        Do not return anything, modify head in-place instead.
        &quot;&quot;&quot;</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> head <span class="token keyword">or</span> <span class="token keyword">not</span> head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        <span class="token comment">## 快慢指针，确定重点</span>
        slow<span class="token punctuation">,</span> fast <span class="token operator">=</span> head<span class="token punctuation">,</span> head
        <span class="token keyword">while</span> fast <span class="token keyword">and</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>
            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>
        right <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>
        slow<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token comment">## 右半部分链表反转</span>
        pre<span class="token punctuation">,</span> cur <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> right 
        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>
            temp <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span> 
            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre
            pre <span class="token operator">=</span> cur
            cur <span class="token operator">=</span> temp
        <span class="token comment">## 拼接两个链表</span>
        left<span class="token punctuation">,</span> right <span class="token operator">=</span> head<span class="token punctuation">,</span> pre
        <span class="token keyword">while</span> left <span class="token keyword">and</span> right<span class="token punctuation">:</span>
            temp2 <span class="token operator">=</span> left<span class="token punctuation">.</span><span class="token builtin">next</span>
            temp3 <span class="token operator">=</span> right<span class="token punctuation">.</span><span class="token builtin">next</span>
            left<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> right
            right<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> temp2
            left <span class="token operator">=</span> temp2
            right <span class="token operator">=</span> temp3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_61-旋转链表" tabindex="-1"><a class="header-anchor" href="#_61-旋转链表"><span>61. 旋转链表</span></a></h3>`,9),L={href:"https://leetcode-cn.com/problems/rotate-list/",title:"61. 旋转链表",target:"_blank",rel:"noopener noreferrer"},N=n("p",null,"一、题目",-1),M=n("p",null,"给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。",-1),q=n("p",null,"二、解析",-1),S={href:"https://leetcode-cn.com/u/gallianoo/",title:"Leetcode-Gallianoo",target:"_blank",rel:"noopener noreferrer"},z=a(`<p>遍历求链表总长度，将链表首尾相连。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> head <span class="token keyword">or</span> <span class="token keyword">not</span> head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">or</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> head
        
        count <span class="token operator">=</span> <span class="token number">1</span>
        cur <span class="token operator">=</span> head
        <span class="token keyword">while</span> cur <span class="token keyword">and</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
            count <span class="token operator">+=</span> <span class="token number">1</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
        
        k <span class="token operator">%=</span> count
        <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> head
        
        cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head  <span class="token comment">## 首尾相连</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>count <span class="token operator">-</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>

        nxt <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
        cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token keyword">return</span> nxt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_21-合并两个有序链表" tabindex="-1"><a class="header-anchor" href="#_21-合并两个有序链表"><span>21. 合并两个有序链表</span></a></h3>`,4),O={href:"https://leetcode-cn.com/problems/merge-two-sorted-lists/",title:"21. 合并两个有序链表",target:"_blank",rel:"noopener noreferrer"},I=a(`<p>一、题目</p><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p><p>二、解析</p><p>1）循环</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> l2<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        dummy <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>
        p <span class="token operator">=</span> dummy

        <span class="token keyword">while</span> l1 <span class="token keyword">and</span> l2<span class="token punctuation">:</span>
            <span class="token keyword">if</span> l1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>
                p<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> l1
                l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token builtin">next</span>
                p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                p<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> l2
                l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span>
                p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token builtin">next</span>
        
        p<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> l1 <span class="token keyword">if</span> l1 <span class="token keyword">else</span> l2
        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span><span class="token builtin">next</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）递归</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> l1 <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> l2
        <span class="token keyword">elif</span> l2 <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> l1
        <span class="token keyword">elif</span> l1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>
            l1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>mergeTwoLists<span class="token punctuation">(</span>l1<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span> l2<span class="token punctuation">)</span>
            <span class="token keyword">return</span> l1
        l2<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>mergeTwoLists<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> l2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_23-合并k个有序链表" tabindex="-1"><a class="header-anchor" href="#_23-合并k个有序链表"><span>23. 合并K个有序链表</span></a></h3>`,8),j={href:"https://leetcode.cn/problems/merge-k-sorted-lists/",title:"https://leetcode.cn/problems/merge-k-sorted-lists/",target:"_blank",rel:"noopener noreferrer"},B=a(`<p>一、题目</p><p>给你一个链表数组，每个链表都已经按升序排列。</p><p>请你将所有链表合并到一个升序链表中，返回合并后的链表。</p><p>示例 1：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：lists = [[1,4,5],[1,3,4],[2,6]]
输出：[1,1,2,3,4,4,5,6]
解释：链表数组如下：
[
  1-&gt;4-&gt;5,
  1-&gt;3-&gt;4,
  2-&gt;6
]
将它们合并到一个有序链表中得到。
1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二、解析</p>`,6),A={href:"https://leetcode-cn.com/problems/merge-k-sorted-lists/solution/he-bing-kge-pai-xu-lian-biao-by-leetcode-solutio-2/",title:"LeetCode-Solution",target:"_blank",rel:"noopener noreferrer"},T=a(`<p>1）一个一个合并。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lists<span class="token punctuation">:</span> List<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">merge_two_sorted_list</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">:</span>
            fake <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>
            cur <span class="token operator">=</span> fake

            <span class="token keyword">while</span> l1 <span class="token keyword">and</span> l2<span class="token punctuation">:</span>
                <span class="token keyword">if</span> l1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>
                    cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> l1
                    l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token builtin">next</span>
                    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> l2
                    l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span>
                    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
            
            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> l1 <span class="token keyword">if</span> l1 <span class="token keyword">else</span> l2
            <span class="token keyword">return</span> fake<span class="token punctuation">.</span><span class="token builtin">next</span>

        ans <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token keyword">for</span> l <span class="token keyword">in</span> lists<span class="token punctuation">:</span>
            ans <span class="token operator">=</span> merge_two_sorted_list<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> l<span class="token punctuation">)</span>

        <span class="token keyword">return</span> ans
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析：</p>`,3),C=n("ul",null,[n("li",null,[s("时间复杂度：假设每个链表的最长长度是 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"n")]),n("annotation",{encoding:"application/x-tex"},"n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"n")])])]),s("。在第一次合并后，ans的长度为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"n")]),n("annotation",{encoding:"application/x-tex"},"n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"n")])])]),s("；第二次合并后，ans的长度为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"2"),n("mo",null,"×"),n("mi",null,"n")]),n("annotation",{encoding:"application/x-tex"},"2\\times n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"2"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"n")])])]),s("。第 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"i")]),n("annotation",{encoding:"application/x-tex"},"i")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6595em"}}),n("span",{class:"mord mathnormal"},"i")])])]),s(" 次合并后，ans的长度为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"i"),n("mo",null,"×"),n("mi",null,"n")]),n("annotation",{encoding:"application/x-tex"},"i \\times n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7429em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"n")])])]),s("。第 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"i")]),n("annotation",{encoding:"application/x-tex"},"i")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6595em"}}),n("span",{class:"mord mathnormal"},"i")])])]),s(" 次合并的时间代价是 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",null,"+"),n("mo",{stretchy:"false"},"("),n("mi",null,"i"),n("mo",null,"−"),n("mn",null,"1"),n("mo",{stretchy:"false"},")"),n("mo",null,"×"),n("mi",null,"n"),n("mo",{stretchy:"false"},")"),n("mo",null,"="),n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"i"),n("mo",null,"×"),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n + (i - 1) \\times n) = O(i \\times n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s("，那么总的时间代价为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("msubsup",null,[n("mo",null,"∑"),n("mrow",null,[n("mi",null,"i"),n("mo",null,"="),n("mn",null,"1")]),n("mi",null,"k")]),n("mo",{stretchy:"false"},"("),n("mi",null,"i"),n("mo",null,"×"),n("mi",null,"n"),n("mo",{stretchy:"false"},")"),n("mo",{stretchy:"false"},")"),n("mo",null,"="),n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mfrac",null,[n("mrow",null,[n("mo",{stretchy:"false"},"("),n("mn",null,"1"),n("mo",null,"+"),n("mi",null,"k"),n("mo",{stretchy:"false"},")"),n("mo",null,"⋅"),n("mi",null,"k")]),n("mn",null,"2")]),n("mo",null,"×"),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(\\sum_{i = 1}^{k} (i \\times n)) = O(\\frac{(1 + k)\\cdot k}{2} \\times n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.2887em","vertical-align":"-0.2997em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mop"},[n("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"∑"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.989em"}},[n("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"i"),n("span",{class:"mrel mtight"},"="),n("span",{class:"mord mtight"},"1")])])]),n("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.2997em"}},[n("span")])])])])]),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},"))"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.355em","vertical-align":"-0.345em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.01em"}},[n("span",{style:{top:"-2.655em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.485em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mopen mtight"},"("),n("span",{class:"mord mtight"},"1"),n("span",{class:"mbin mtight"},"+"),n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k"),n("span",{class:"mclose mtight"},")"),n("span",{class:"mbin mtight"},"⋅"),n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.345em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s("，故渐进时间复杂度为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("msup",null,[n("mi",null,"k"),n("mn",null,"2")]),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(k^2 n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])]),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s("。")]),n("li",null,[s("空间复杂度：没有用到与 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"k")]),n("annotation",{encoding:"application/x-tex"},"k")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k")])])]),s(" 和 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"n")]),n("annotation",{encoding:"application/x-tex"},"n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"n")])])]),s(" 规模相关的辅助空间，故渐进空间复杂度为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(1)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")")])])]),s("。")])],-1),D=a(`<p>2）分治法。虽然也是两个两个合并，但是使用分治的方法。可以参考归并排序。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lists<span class="token punctuation">:</span> List<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">merge_two_sorted_list</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment">## 与 方法1）相同</span>
            <span class="token keyword">pass</span>

        <span class="token keyword">def</span> <span class="token function">helper</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">None</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> lists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            
            mid <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
            left <span class="token operator">=</span> helper<span class="token punctuation">(</span>lists<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>
            right <span class="token operator">=</span> helper<span class="token punctuation">(</span>lists<span class="token punctuation">[</span>mid<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> merge_two_sorted_list<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>

        <span class="token keyword">return</span> helper<span class="token punctuation">(</span>lists<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析：</p>`,4),K=n("ul",null,[n("li",null,[s("时间复杂度：考虑递归「向上回升」的过程——第一轮合并 $ \\frac{k}{2} $ 组链表，每一组的时间代价是 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mn",null,"2"),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(2n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"2"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s("；第二轮合并 $ \\frac{k}{4} $组链表，每一组的时间代价是 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mn",null,"4"),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(4n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"4"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s("......所以总的时间代价是 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("msubsup",null,[n("mo",null,"∑"),n("mrow",null,[n("mi",null,"i"),n("mo",null,"="),n("mn",null,"1")]),n("mi",{mathvariant:"normal"},"∞")]),n("mfrac",null,[n("mi",null,"k"),n("msup",null,[n("mn",null,"2"),n("mi",null,"i")])]),n("mo",null,"×"),n("msup",null,[n("mn",null,"2"),n("mi",null,"i")]),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(\\sum_{i = 1}^{\\infty} \\frac{k}{2^i} \\times 2^i n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.2251em","vertical-align":"-0.345em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mop"},[n("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"∑"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8043em"}},[n("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"i"),n("span",{class:"mrel mtight"},"="),n("span",{class:"mord mtight"},"1")])])]),n("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"∞")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.2997em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8801em"}},[n("span",{style:{top:"-2.655em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.7571em"}},[n("span",{style:{top:"-2.786em","margin-right":"0.0714em"}},[n("span",{class:"pstrut",style:{height:"2.5em"}}),n("span",{class:"sizing reset-size3 size1 mtight"},[n("span",{class:"mord mathnormal mtight"},"i")])])])])])])])])])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.394em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.345em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0747em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8247em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"i")])])])])])])]),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s("，故渐进时间复杂度为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"k"),n("mi",null,"n"),n("mo",null,"×"),n("mi",null,"log"),n("mo",null,"⁡"),n("mi",null,"k"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(kn \\times \\log k)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"kn"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mop"},[s("lo"),n("span",{style:{"margin-right":"0.01389em"}},"g")]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),n("span",{class:"mclose"},")")])])]),s("。")]),n("li",null,[s("空间复杂度：递归会使用到 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"log"),n("mo",null,"⁡"),n("mi",null,"k"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(\\log k)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mop"},[s("lo"),n("span",{style:{"margin-right":"0.01389em"}},"g")]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),n("span",{class:"mclose"},")")])])]),s(" 空间代价的栈空间。")])],-1),P=a(`<p>3）使用优先队列。优先队列用来维护每个链表的最小的结点。</p><p>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Status</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Status</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> val<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> ptr<span class="token punctuation">;</span>

        <span class="token class-name">Status</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>ptr <span class="token operator">=</span> ptr<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Status</span> status2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">-</span> status2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Status</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Status</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ListNode</span> node<span class="token operator">:</span> lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Status</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">ListNode</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> tail <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Status</span> f <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            tail<span class="token punctuation">.</span>next <span class="token operator">=</span> f<span class="token punctuation">.</span>ptr<span class="token punctuation">;</span>
            tail <span class="token operator">=</span> tail<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Status</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">,</span> f<span class="token punctuation">.</span>ptr<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_147-对链表进行插入排序" tabindex="-1"><a class="header-anchor" href="#_147-对链表进行插入排序"><span>147. 对链表进行插入排序</span></a></h3>`,4),G={href:"https://leetcode-cn.com/problems/insertion-sort-list/",title:"147. 对链表进行插入排序",target:"_blank",rel:"noopener noreferrer"},V=a(`<p>一、题目</p><p>给定单个链表的头 head ，使用 插入排序 对链表进行排序，并返回 排序后链表的头 。</p><p>插入排序 算法的步骤:</p><ol><li>插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。</li><li>每次迭代中，插入排序只从输入数据中移除一个待排序的元素，找到它在序列中适当的位置，并将其插入。</li><li>重复直到所有输入数据插入完为止。</li></ol><p>下面是插入排序算法的一个图形示例。部分排序的列表(黑色)最初只包含列表中的第一个元素。每次迭代时，从输入数据中删除一个元</p><p>素(红色)，并就地插入已排序的列表中。</p><figure><img src="https://raw.githubusercontent.com/shengchaohua/my-images/main/images/202312301015470.gif" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>二、解析</p><p>使用 next 指针比较方便，不需要保存当前结点的前一个结点。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">insertionSortList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> head <span class="token keyword">or</span> <span class="token keyword">not</span> head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> head
        
        dummy <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>
        dummy<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head

        cur <span class="token operator">=</span> head
        <span class="token keyword">while</span> cur <span class="token keyword">and</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> cur<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val<span class="token punctuation">:</span>
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
                <span class="token keyword">continue</span>
            
            pre <span class="token operator">=</span> dummy
            <span class="token keyword">while</span> pre<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val<span class="token punctuation">:</span>
                pre <span class="token operator">=</span> pre<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token comment">## 插入法，把nxt插在pre后面</span>
            nxt <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> nxt<span class="token punctuation">.</span><span class="token builtin">next</span>
            nxt<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre<span class="token punctuation">.</span><span class="token builtin">next</span>
            pre<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> nxt

        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span><span class="token builtin">next</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_148-排序链表-o-nlgn" tabindex="-1"><a class="header-anchor" href="#_148-排序链表-o-nlgn"><span>148. 排序链表 - O(nlgn)</span></a></h3>`,12),E={href:"https://leetcode-cn.com/problems/sort-list/",title:"148. 排序链表",target:"_blank",rel:"noopener noreferrer"},$=a(`<p>一、题目</p><p>给你链表的头结点 <code>head</code> ，请将其按 <strong>升序</strong> 排列并返回 <strong>排序后的链表</strong> 。</p><p><strong>进阶：</strong> 你可以在<code>O(nlogn)</code> 时间复杂度和常数级空间复杂度下，对链表进行排序吗？</p><p>二、解析</p><p>1）使用归并排序。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">sortList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">merge_two_sorted_list</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">:</span>
            dummy <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>
            cur <span class="token operator">=</span> dummy
            <span class="token keyword">while</span> l1 <span class="token keyword">and</span> l2<span class="token punctuation">:</span>
                <span class="token keyword">if</span> l1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>
                    cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> l1
                    l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token builtin">next</span>
                    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> l2
                    l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span>
                    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> l1 <span class="token keyword">if</span> l1 <span class="token keyword">else</span> l2
            <span class="token keyword">return</span> dummy<span class="token punctuation">.</span><span class="token builtin">next</span>

        <span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> head <span class="token keyword">or</span> <span class="token keyword">not</span> head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> head
            pre <span class="token operator">=</span> <span class="token boolean">None</span>
            fast <span class="token operator">=</span> slow <span class="token operator">=</span> head
            <span class="token keyword">while</span> fast <span class="token keyword">and</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
                pre <span class="token operator">=</span> slow
                slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>
                fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>
            pre<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>

            left <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>head<span class="token punctuation">)</span>
            right <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>slow<span class="token punctuation">)</span>
            <span class="token keyword">return</span> merge_two_sorted_list<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>
        
        <span class="token keyword">return</span> merge_sort<span class="token punctuation">(</span>head<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）使用快速排序。</p>`,7),F={href:"https://leetcode-cn.com/problems/sort-list/solution/gui-bing-pai-xu-he-kuai-su-pai-xu-by-a380922457/",title:"Leetcode-a380922457",target:"_blank",rel:"noopener noreferrer"},J=a(`<p>快速排序的第三种方法，选择头结点作为轴元素，因为选尾结点需要遍历一遍链表。</p><p>Python实现。代码没什么问题，但是最后一个测试用例没通过，结果超时。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">sortList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> tail<span class="token punctuation">)</span><span class="token punctuation">:</span>
            pivot <span class="token operator">=</span> head<span class="token punctuation">.</span>val
            store_node <span class="token operator">=</span> head
            cur <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">while</span> cur <span class="token operator">!=</span> tail<span class="token punctuation">:</span>
                <span class="token keyword">if</span> cur<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> pivot<span class="token punctuation">:</span>
                    store_node <span class="token operator">=</span> store_node<span class="token punctuation">.</span><span class="token builtin">next</span>
                    store_node<span class="token punctuation">.</span>val<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>val <span class="token operator">=</span> cur<span class="token punctuation">.</span>val<span class="token punctuation">,</span> store_node<span class="token punctuation">.</span>val
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
            head<span class="token punctuation">.</span>val<span class="token punctuation">,</span> store_node<span class="token punctuation">.</span>val <span class="token operator">=</span> store_node<span class="token punctuation">.</span>val<span class="token punctuation">,</span> head<span class="token punctuation">.</span>val
            <span class="token keyword">return</span> store_node

        <span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> tail<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> head <span class="token operator">==</span> tail <span class="token keyword">or</span> head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">==</span> tail<span class="token punctuation">:</span>
                <span class="token keyword">return</span>
            par_node <span class="token operator">=</span> partition<span class="token punctuation">(</span>head<span class="token punctuation">,</span> tail<span class="token punctuation">)</span>
            quick_sort<span class="token punctuation">(</span>head<span class="token punctuation">,</span> par_node<span class="token punctuation">)</span>
            quick_sort<span class="token punctuation">(</span>par_node<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span> tail<span class="token punctuation">)</span>
            
        quick_sort<span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> head
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java实现，逻辑相同，通过！</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">sortList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">quickSort</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> tail <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> tail<span class="token punctuation">)</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> par_node <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> tail<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">quickSort</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> par_node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">quickSort</span><span class="token punctuation">(</span>par_node<span class="token punctuation">.</span>next<span class="token punctuation">,</span> tail<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> pivot <span class="token operator">=</span> head<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> store_node <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                store_node <span class="token operator">=</span> store_node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                <span class="token function">swap</span><span class="token punctuation">(</span>store_node<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> store_node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> store_node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> n1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> n2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> n1<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
        n1<span class="token punctuation">.</span>val <span class="token operator">=</span> n2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
        n2<span class="token punctuation">.</span>val <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-两数相加" tabindex="-1"><a class="header-anchor" href="#_2-两数相加"><span>2. 两数相加</span></a></h3>`,6),Q={href:"https://leetcode-cn.com/problems/add-two-numbers/",title:"2. 两数相加",target:"_blank",rel:"noopener noreferrer"},R=a(`<p>一、题目</p><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 <strong>逆序</strong> 的方式存储的，并且它们的每个节点只能存储 一位 数字。 如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。 您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>二、解析</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> l2<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        dummy <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        cur <span class="token operator">=</span> dummy
        
        p1<span class="token punctuation">,</span> p2 <span class="token operator">=</span> l1<span class="token punctuation">,</span> l2
        carry <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> p1 <span class="token keyword">or</span> p2 <span class="token keyword">or</span> carry <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            x <span class="token operator">=</span> p1<span class="token punctuation">.</span>val <span class="token keyword">if</span> p1 <span class="token keyword">else</span> <span class="token number">0</span>
            y <span class="token operator">=</span> p2<span class="token punctuation">.</span>val <span class="token keyword">if</span> p2 <span class="token keyword">else</span> <span class="token number">0</span>
            carry<span class="token punctuation">,</span> remainder <span class="token operator">=</span> <span class="token builtin">divmod</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y <span class="token operator">+</span> carry<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>remainder<span class="token punctuation">)</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">if</span> p1<span class="token punctuation">:</span> p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">if</span> p2<span class="token punctuation">:</span> p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span><span class="token builtin">next</span>

        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span><span class="token builtin">next</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_445-两数相加-ii" tabindex="-1"><a class="header-anchor" href="#_445-两数相加-ii"><span>445. 两数相加 II</span></a></h3>`,5),X={href:"https://leetcode-cn.com/problems/add-two-numbers-ii/",title:"445. 两数相加 II",target:"_blank",rel:"noopener noreferrer"},Y=a(`<p>一、题目</p><p>给你两个 非空 链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。 你可以假设除了数字 0 之外，这两个数字都不会以零开头。 进阶：如果输入链表不能修改该如何处理？换句话说，你不能对列表中的节点进行翻转。</p><p>二、解析</p><p>使用栈！代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> l2<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        s1<span class="token punctuation">,</span> s2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">while</span> l1<span class="token punctuation">:</span>
            s1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">while</span> l2<span class="token punctuation">:</span>
            s2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span>
        ans <span class="token operator">=</span> <span class="token boolean">None</span>
        carry <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> s1 <span class="token keyword">or</span> s2 <span class="token keyword">or</span> carry <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            a <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">if</span> <span class="token keyword">not</span> s1 <span class="token keyword">else</span> s1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
            b <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">if</span> <span class="token keyword">not</span> s2 <span class="token keyword">else</span> s2<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
            cur <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span> carry
            carry <span class="token operator">=</span> cur <span class="token operator">//</span> <span class="token number">10</span>
            cur <span class="token operator">%=</span> <span class="token number">10</span>
            curnode <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>cur<span class="token punctuation">)</span>
            curnode<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ans
            ans <span class="token operator">=</span> curnode
        <span class="token keyword">return</span> ans
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_160-相交链表" tabindex="-1"><a class="header-anchor" href="#_160-相交链表"><span>160. 相交链表</span></a></h3>`,6),H={href:"https://leetcode.cn/problems/intersection-of-two-linked-lists",target:"_blank",rel:"noopener noreferrer"},U=a(`<p>一、题目</p><p>给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 null 。</p><p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p><p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p><p>二、解析</p><p>假装两个链表连接在一起，遍历完一个链表再遍历另一个链表。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> headA<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> headB<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> headA <span class="token keyword">or</span> <span class="token keyword">not</span> headB<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        
        pA <span class="token operator">=</span> headA
        pB <span class="token operator">=</span> headB
        <span class="token keyword">while</span> pA <span class="token operator">!=</span> pB<span class="token punctuation">:</span>
            pA <span class="token operator">=</span> pA<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">if</span> pA <span class="token keyword">else</span> headB
            pB <span class="token operator">=</span> pB<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">if</span> pB <span class="token keyword">else</span> headA
        <span class="token keyword">return</span> pA
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_141-环形链表" tabindex="-1"><a class="header-anchor" href="#_141-环形链表"><span>141. 环形链表</span></a></h3>`,9),W={href:"https://leetcode.cn/problems/linked-list-cycle/",target:"_blank",rel:"noopener noreferrer"},Z=n("p",null,"一、题目",-1),nn=n("p",null,"给你一个链表的头节点 head ，判断链表中是否有环。",-1),sn=n("p",null,"如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。",-1),an=n("p",null,"如果链表中存在环 ，则返回 true 。 否则，返回 false 。",-1),en=n("p",null,"二、解析",-1),tn={href:"https://leetcode.cn/problems/find-the-duplicate-number/solution/xun-zhao-zhong-fu-shu-by-leetcode-solution/",title:"https://leetcode.cn/problems/find-the-duplicate-number/solution/xun-zhao-zhong-fu-shu-by-leetcode-solution/",target:"_blank",rel:"noopener noreferrer"},pn=a(`<p>1）哈希表。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        seen <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> head<span class="token punctuation">:</span>
            <span class="token keyword">if</span> head <span class="token keyword">in</span> seen<span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">True</span>
            seen<span class="token punctuation">.</span>add<span class="token punctuation">(</span>head<span class="token punctuation">)</span>
            head <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）快慢指针。快指针一次走两步，慢指针一次走一步，如果链表有环，那么两个指针一定会相遇。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> head <span class="token keyword">or</span> <span class="token keyword">not</span> head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        
        slow <span class="token operator">=</span> head
        fast <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>

        <span class="token keyword">while</span> slow <span class="token operator">!=</span> fast<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> fast <span class="token keyword">or</span> <span class="token keyword">not</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">False</span>
            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>
            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>
        
        <span class="token keyword">return</span> <span class="token boolean">True</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_142-环形链表ii" tabindex="-1"><a class="header-anchor" href="#_142-环形链表ii"><span>142. 环形链表II</span></a></h3>`,7),ln={href:"https://leetcode.cn/problems/linked-list-cycle-ii/",title:"https://leetcode.cn/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"},on=a(`<p>一、题目</p><p>给定一个链表的头节点  head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p><p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p><p>不允许修改链表。</p><p>二、解析</p><p>1）使用哈希表。</p><p>Golang代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>
    seen <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token operator">*</span>ListNode<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> head <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> seen<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
            <span class="token keyword">return</span> head
        <span class="token punctuation">}</span>
        seen<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
        head <span class="token operator">=</span> head<span class="token punctuation">.</span>Next
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）快慢指针。快慢指针相遇时，再定义一个指针从头开始走，新指针和慢指针会在链表开始入环的第一个节点相遇。</p><p>Golang代码如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>
    slow<span class="token punctuation">,</span> fast <span class="token operator">:=</span> head<span class="token punctuation">,</span> head
    <span class="token keyword">for</span> fast <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>Next
        <span class="token keyword">if</span> fast<span class="token punctuation">.</span>Next <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">nil</span>
        <span class="token punctuation">}</span>
        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>Next<span class="token punctuation">.</span>Next
        <span class="token keyword">if</span> fast <span class="token operator">==</span> slow <span class="token punctuation">{</span>
            p <span class="token operator">:=</span> head
            <span class="token keyword">for</span> p <span class="token operator">!=</span> slow <span class="token punctuation">{</span>
                p <span class="token operator">=</span> p<span class="token punctuation">.</span>Next
                slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>Next
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> p
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_138-复制带随机指针的链表" tabindex="-1"><a class="header-anchor" href="#_138-复制带随机指针的链表"><span>138. 复制带随机指针的链表</span></a></h3>`,12),cn={href:"https://leetcode.cn/problems/copy-list-with-random-pointer/",title:"https://leetcode.cn/problems/copy-list-with-random-pointer/",target:"_blank",rel:"noopener noreferrer"},un=a(`<p>一、题目</p><p>给你一个长度为 n 的链表，每个节点包含一个额外增加的随机指针 random ，该指针可以指向链表中的任何节点或空节点。</p><p>构造这个链表的 深拷贝。 深拷贝应该正好由 n 个 全新 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 next 指针和 random 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。复制链表中的指针都不应指向原链表中的节点 。</p><p>例如，如果原链表中有 X 和 Y 两个节点，其中 X.random --&gt; Y 。那么在复制链表中对应的两个节点 x 和 y ，同样有 x.random --&gt; y 。</p><p>返回复制链表的头节点。</p><p>用一个由 n 个节点组成的链表来表示输入/输出中的链表。每个节点用一个 [val, random_index] 表示：</p><ul><li>val：一个表示 Node.val 的整数。</li><li>random_index：随机指针指向的节点索引（范围从 0 到 n-1）；如果不指向任何节点，则为 null 。 你的代码 只 接受原链表的头节点 head 作为传入参数。</li></ul><p>提示：</p><ul><li>0 &lt;= n &lt;= 1000</li><li>-104 &lt;= Node.val &lt;= 104</li><li>Node.random 为 null 或指向链表中的节点。</li></ul><p>二、解析</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> <span class="token string">&#39;Node&#39;</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;Node&#39;</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> head<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        
        p <span class="token operator">=</span> head
        seen <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">while</span> p<span class="token punctuation">:</span>
            seen<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> Node<span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
            p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token builtin">next</span>
        
        fake <span class="token operator">=</span> cur <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        p <span class="token operator">=</span> head
        <span class="token keyword">while</span> p<span class="token punctuation">:</span>
            tmp <span class="token operator">=</span> seen<span class="token punctuation">[</span>p<span class="token punctuation">]</span>
            tmp<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> seen<span class="token punctuation">[</span>p<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">]</span> <span class="token keyword">if</span> p<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">in</span> seen <span class="token keyword">else</span> <span class="token boolean">None</span>
            tmp<span class="token punctuation">.</span>random <span class="token operator">=</span> seen<span class="token punctuation">[</span>p<span class="token punctuation">.</span>random<span class="token punctuation">]</span> <span class="token keyword">if</span> p<span class="token punctuation">.</span>random <span class="token keyword">in</span> seen <span class="token keyword">else</span> <span class="token boolean">None</span>
            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> tmp
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
            p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token builtin">next</span>
        
        <span class="token keyword">return</span> fake<span class="token punctuation">.</span><span class="token builtin">next</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function rn(dn,kn){const e=l("ExternalLinkIcon");return o(),c("div",null,[i(" more "),r,n("blockquote",null,[n("p",null,[n("a",d,[s("206. 反转链表"),t(e)])])]),k,n("blockquote",null,[n("p",null,[n("a",m,[s("92. 反转链表 II"),t(e)])])]),v,n("blockquote",null,[n("p",null,[n("a",b,[s("24. 两两交换链表中的节点"),t(e)])])]),h,n("blockquote",null,[n("p",null,[n("a",y,[s("25. K 个一组翻转链表"),t(e)])])]),g,n("blockquote",null,[n("p",null,[n("a",w,[s("234. 回文链表"),t(e)])])]),x,n("blockquote",null,[n("p",null,[n("a",f,[s("143. 重排链表"),t(e)])])]),_,n("blockquote",null,[n("p",null,[n("a",L,[s("61. 旋转链表"),t(e)])])]),N,M,q,n("blockquote",null,[n("p",null,[s("参考 "),n("a",S,[s("Leetcode-Gallianoo"),t(e)])])]),z,n("blockquote",null,[n("p",null,[n("a",O,[s("21. 合并两个有序链表"),t(e)])])]),I,n("blockquote",null,[n("p",null,[n("a",j,[s("https://leetcode.cn/problems/merge-k-sorted-lists/"),t(e)])])]),B,n("blockquote",null,[n("p",null,[s("参考 "),n("a",A,[s("LeetCode-Solution"),t(e)])])]),T,C,D,K,P,n("blockquote",null,[n("p",null,[n("a",G,[s("147. 对链表进行插入排序"),t(e)])])]),V,n("blockquote",null,[n("p",null,[n("a",E,[s("148. 排序链表"),t(e)])])]),$,n("blockquote",null,[n("p",null,[s("参考 "),n("a",F,[s("Leetcode-a380922457"),t(e)])])]),J,n("blockquote",null,[n("p",null,[n("a",Q,[s("2. 两数相加"),t(e)])])]),R,n("blockquote",null,[n("p",null,[n("a",X,[s("445. 两数相加 II"),t(e)])])]),Y,n("blockquote",null,[n("p",null,[n("a",H,[s("160. 相交链表"),t(e)])])]),U,n("blockquote",null,[n("p",null,[n("a",W,[s("141. 环形链表"),t(e)])])]),Z,nn,sn,an,en,n("blockquote",null,[n("p",null,[n("a",tn,[s("https://leetcode.cn/problems/find-the-duplicate-number/solution/xun-zhao-zhong-fu-shu-by-leetcode-solution/"),t(e)])])]),pn,n("blockquote",null,[n("p",null,[n("a",ln,[s("https://leetcode.cn/problems/linked-list-cycle-ii/"),t(e)])])]),on,n("blockquote",null,[n("p",null,[n("a",cn,[s("https://leetcode.cn/problems/copy-list-with-random-pointer/"),t(e)])])]),un])}const bn=p(u,[["render",rn],["__file","linked-list.html.vue"]]);export{bn as default};
